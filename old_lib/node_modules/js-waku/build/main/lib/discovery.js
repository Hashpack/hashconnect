"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPseudoRandomSubset = exports.getBootstrapNodes = void 0;
const axios_1 = __importDefault(require("axios"));
const debug_1 = __importDefault(require("debug"));
const utils_1 = require("libp2p-gossipsub/src/utils");
const dbg = debug_1.default('waku:discovery');
const DefaultWantedNumber = 1;
/**
 * GET list of nodes from remote HTTP host.
 *
 * Default behaviour is to return nodes hosted by Status.
 *
 * @param path The property path to access the node list. The result should be
 * a string, a string array or an object. If the result is an object then the
 * values of the objects are used as multiaddresses. For example, if the GET
 * request returns `{ foo: { bar: [address1, address2] } }` then `path` should be
 * `[ "foo", "bar" ]`.
 * @param url Remote host containing bootstrap peers in JSON format.
 * @param wantedNumber The number of connections desired. Defaults to [DefaultWantedNumber].
 *
 * @returns An array of multiaddresses.
 * @throws If the remote host is unreachable or the response cannot be parsed
 * according to the passed _path_.
 */
async function getBootstrapNodes(path = ['fleets', 'wakuv2.prod', 'waku-websocket'], url = 'https://fleets.status.im/', wantedNumber = DefaultWantedNumber) {
    if (wantedNumber <= 0) {
        return [];
    }
    const res = await axios_1.default.get(url, {
        headers: { 'Content-Type': 'application/json' },
    });
    let nodes = res.data;
    for (const prop of path) {
        if (nodes[prop] === undefined) {
            dbg(`Failed to retrieve bootstrap nodes: ${prop} does not exist on `, nodes);
            throw `Failed to retrieve bootstrap nodes: ${prop} does not exist on ${JSON.stringify(nodes)}`;
        }
        nodes = nodes[prop];
    }
    if (Array.isArray(nodes)) {
        return getPseudoRandomSubset(nodes, wantedNumber);
    }
    if (typeof nodes === 'string') {
        return [nodes];
    }
    if (typeof nodes === 'object') {
        nodes = Object.values(nodes);
        return getPseudoRandomSubset(nodes, wantedNumber);
    }
    throw `Failed to retrieve bootstrap nodes: response format is not supported: ${JSON.stringify(nodes)}`;
}
exports.getBootstrapNodes = getBootstrapNodes;
function getPseudoRandomSubset(values, wantedNumber) {
    if (values.length <= wantedNumber) {
        return values;
    }
    return utils_1.shuffle(values).slice(0, wantedNumber);
}
exports.getPseudoRandomSubset = getPseudoRandomSubset;
//# sourceMappingURL=discovery.js.map