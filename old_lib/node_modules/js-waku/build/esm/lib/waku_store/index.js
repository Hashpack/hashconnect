var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import debug from 'debug';
import concat from 'it-concat';
import lp from 'it-length-prefixed';
import pipe from 'it-pipe';
import { HistoryResponse_Error } from '../../proto/waku/v2/store';
import { getPeersForProtocol, selectRandomPeer } from '../select_peer';
import { hexToBuf } from '../utils';
import { DefaultPubSubTopic } from '../waku';
import { WakuMessage } from '../waku_message';
import { HistoryRPC, PageDirection } from './history_rpc';
var dbg = debug('waku:store');
export var StoreCodec = '/vac/waku/store/2.0.0-beta3';
export var DefaultPageSize = 10;
export { PageDirection };
/**
 * Implements the [Waku v2 Store protocol](https://rfc.vac.dev/spec/13/).
 */
var WakuStore = /** @class */ (function () {
    function WakuStore(libp2p, options) {
        this.libp2p = libp2p;
        if (options === null || options === void 0 ? void 0 : options.pubSubTopic) {
            this.pubSubTopic = options.pubSubTopic;
        }
        else {
            this.pubSubTopic = DefaultPubSubTopic;
        }
        this.decryptionKeys = new Set();
    }
    /**
     * Do a History Query to a Waku Store.
     *
     * @param contentTopics The content topics to pass to the query, leave empty to
     * retrieve all messages.
     *
     * @throws If not able to reach a Waku Store peer to query
     * or if an error is encountered when processing the reply.
     */
    WakuStore.prototype.queryHistory = function (contentTopics, options) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var startTime, endTime, opts, peer, connection, decryptionKeys, messages, cursor, _loop_1, state_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (options === null || options === void 0 ? void 0 : options.timeFilter) {
                            startTime = options.timeFilter.startTime.getTime() / 1000;
                            endTime = options.timeFilter.endTime.getTime() / 1000;
                        }
                        opts = Object.assign({
                            pubSubTopic: this.pubSubTopic,
                            pageDirection: PageDirection.BACKWARD,
                            pageSize: DefaultPageSize,
                        }, options, {
                            startTime: startTime,
                            endTime: endTime,
                        }, { contentTopics: contentTopics });
                        dbg('Querying history with the following options', options);
                        if (opts.peerId) {
                            peer = this.libp2p.peerStore.get(opts.peerId);
                            if (!peer)
                                throw "Failed to retrieve connection details for provided peer in peer store: " + opts.peerId.toB58String();
                        }
                        else {
                            peer = this.randomPeer;
                            if (!peer)
                                throw 'Failed to find known peer that registers waku store protocol';
                        }
                        if (!peer.protocols.includes(StoreCodec))
                            throw "Peer does not register waku store protocol: " + peer.id.toB58String();
                        connection = this.libp2p.connectionManager.get(peer.id);
                        if (!connection)
                            throw 'Failed to get a connection to the peer';
                        decryptionKeys = Array.from(this.decryptionKeys.values());
                        if (opts.decryptionKeys) {
                            opts.decryptionKeys.forEach(function (key) {
                                decryptionKeys.push(hexToBuf(key));
                            });
                        }
                        messages = [];
                        cursor = undefined;
                        _loop_1 = function () {
                            var stream, queryOpts, historyRpcQuery, res, reply, response, pageMessages, abort, responsePageSize, queryPageSize;
                            return __generator(this, function (_f) {
                                switch (_f.label) {
                                    case 0: return [4 /*yield*/, connection.newStream(StoreCodec)];
                                    case 1:
                                        stream = (_f.sent()).stream;
                                        queryOpts = Object.assign(opts, { cursor: cursor });
                                        historyRpcQuery = HistoryRPC.createQuery(queryOpts);
                                        dbg('Querying store peer', connection.remoteAddr.toString());
                                        return [4 /*yield*/, pipe([historyRpcQuery.encode()], lp.encode(), stream, lp.decode(), concat)];
                                    case 2:
                                        res = _f.sent();
                                        reply = HistoryRPC.decode(res.slice());
                                        response = reply.response;
                                        if (!response) {
                                            throw 'History response misses response field';
                                        }
                                        if (response.error &&
                                            response.error === HistoryResponse_Error.ERROR_INVALID_CURSOR) {
                                            throw 'History response contains an Error: INVALID CURSOR';
                                        }
                                        if (!response.messages || !response.messages.length) {
                                            // No messages left (or stored)
                                            console.log('No messages present in HistoryRPC response');
                                            return [2 /*return*/, { value: messages }];
                                        }
                                        dbg(response.messages.length + " messages retrieved for pubsub topic " + opts.pubSubTopic);
                                        pageMessages = [];
                                        return [4 /*yield*/, Promise.all(response.messages.map(function (protoMsg) { return __awaiter(_this, void 0, void 0, function () {
                                                var msg;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, WakuMessage.decodeProto(protoMsg, decryptionKeys)];
                                                        case 1:
                                                            msg = _a.sent();
                                                            if (msg) {
                                                                messages.push(msg);
                                                                pageMessages.push(msg);
                                                            }
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 3:
                                        _f.sent();
                                        abort = false;
                                        if (opts.callback) {
                                            abort = Boolean(opts.callback(pageMessages));
                                        }
                                        responsePageSize = (_a = response.pagingInfo) === null || _a === void 0 ? void 0 : _a.pageSize;
                                        queryPageSize = (_c = (_b = historyRpcQuery.query) === null || _b === void 0 ? void 0 : _b.pagingInfo) === null || _c === void 0 ? void 0 : _c.pageSize;
                                        if (abort ||
                                            // Response page size smaller than query, meaning this is the last page
                                            (responsePageSize && queryPageSize && responsePageSize < queryPageSize)) {
                                            return [2 /*return*/, { value: messages }];
                                        }
                                        cursor = (_d = response.pagingInfo) === null || _d === void 0 ? void 0 : _d.cursor;
                                        if (cursor === undefined) {
                                            // If the server does not return cursor then there is an issue,
                                            // Need to abort or we end up in an infinite loop
                                            console.log('No cursor returned by peer.');
                                            return [2 /*return*/, { value: messages }];
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        _e.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _e.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Register a decryption key to attempt decryption of messages received in any
     * subsequent [[queryHistory]] call. This can either be a private key for
     * asymmetric encryption or a symmetric key. [[WakuStore]] will attempt to
     * decrypt messages using both methods.
     *
     * Strings must be in hex format.
     */
    WakuStore.prototype.addDecryptionKey = function (key) {
        this.decryptionKeys.add(hexToBuf(key));
    };
    /**
     * Delete a decryption key that was used to attempt decryption of messages
     * received in subsequent [[queryHistory]] calls.
     *
     * Strings must be in hex format.
     */
    WakuStore.prototype.deleteDecryptionKey = function (key) {
        this.decryptionKeys.delete(hexToBuf(key));
    };
    Object.defineProperty(WakuStore.prototype, "peers", {
        /**
         * Returns known peers from the address book (`libp2p.peerStore`) that support
         * store protocol. Waku may or  may not be currently connected to these peers.
         */
        get: function () {
            return getPeersForProtocol(this.libp2p, StoreCodec);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WakuStore.prototype, "randomPeer", {
        /**
         * Returns a random peer that supports store protocol from the address
         * book (`libp2p.peerStore`). Waku may or  may not be currently connected to
         * this peer.
         */
        get: function () {
            return selectRandomPeer(this.peers);
        },
        enumerable: false,
        configurable: true
    });
    return WakuStore;
}());
export { WakuStore };
//# sourceMappingURL=index.js.map