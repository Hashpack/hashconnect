export type MatchesFunction = import('./types').MatchesFunction;
export type PartialMatchesFunction = import('./types').PartialMatchesFunction;
export type Mafmt = import('./types').Mafmt;
export const DNS: import("./types").Mafmt;
/**
 * @typedef {import('./types').MatchesFunction} MatchesFunction
 * @typedef {import('./types').PartialMatchesFunction} PartialMatchesFunction
 * @typedef {import('./types').Mafmt} Mafmt
 */
export const DNS4: import("./types").Mafmt;
export const DNS6: import("./types").Mafmt;
export const DNSADDR: import("./types").Mafmt;
export const IP: import("./types").Mafmt;
export const TCP: import("./types").Mafmt;
export const UDP: import("./types").Mafmt;
export const QUIC: import("./types").Mafmt;
export const UTP: import("./types").Mafmt;
export const HTTP: import("./types").Mafmt;
export const HTTPS: import("./types").Mafmt;
export const WebSockets: import("./types").Mafmt;
export const WebSocketsSecure: import("./types").Mafmt;
export const WebSocketStar: import("./types").Mafmt;
export const WebRTCStar: import("./types").Mafmt;
export const WebRTCDirect: import("./types").Mafmt;
export const Reliable: import("./types").Mafmt;
export const Stardust: import("./types").Mafmt;
export const Circuit: import("./types").Mafmt;
export const P2P: import("./types").Mafmt;
export { P2P as IPFS };
//# sourceMappingURL=index.d.ts.map