{"version":3,"file":"ApiReportGenerator.js","sourceRoot":"","sources":["../../src/generators/ApiReportGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport { Text, InternalError } from '@rushstack/node-core-library';\r\nimport { ReleaseTag } from '@microsoft/api-extractor-model';\r\n\r\nimport { Collector } from '../collector/Collector';\r\nimport { TypeScriptHelpers } from '../analyzer/TypeScriptHelpers';\r\nimport { Span } from '../analyzer/Span';\r\nimport { CollectorEntity } from '../collector/CollectorEntity';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { ApiItemMetadata } from '../collector/ApiItemMetadata';\r\nimport { AstImport } from '../analyzer/AstImport';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport { ExtractorMessage } from '../api/ExtractorMessage';\r\nimport { IndentedWriter } from './IndentedWriter';\r\nimport { DtsEmitHelpers } from './DtsEmitHelpers';\r\nimport { AstNamespaceImport } from '../analyzer/AstNamespaceImport';\r\nimport { AstEntity } from '../analyzer/AstEntity';\r\nimport { AstModuleExportInfo } from '../analyzer/AstModule';\r\nimport { SourceFileLocationFormatter } from '../analyzer/SourceFileLocationFormatter';\r\n\r\nexport class ApiReportGenerator {\r\n  private static _trimSpacesRegExp: RegExp = / +$/gm;\r\n\r\n  /**\r\n   * Compares the contents of two API files that were created using ApiFileGenerator,\r\n   * and returns true if they are equivalent.  Note that these files are not normally edited\r\n   * by a human; the \"equivalence\" comparison here is intended to ignore spurious changes that\r\n   * might be introduced by a tool, e.g. Git newline normalization or an editor that strips\r\n   * whitespace when saving.\r\n   */\r\n  public static areEquivalentApiFileContents(\r\n    actualFileContent: string,\r\n    expectedFileContent: string\r\n  ): boolean {\r\n    // NOTE: \"\\s\" also matches \"\\r\" and \"\\n\"\r\n    const normalizedActual: string = actualFileContent.replace(/[\\s]+/g, ' ');\r\n    const normalizedExpected: string = expectedFileContent.replace(/[\\s]+/g, ' ');\r\n    return normalizedActual === normalizedExpected;\r\n  }\r\n\r\n  public static generateReviewFileContent(collector: Collector): string {\r\n    const writer: IndentedWriter = new IndentedWriter();\r\n    writer.trimLeadingSpaces = true;\r\n\r\n    writer.writeLine(\r\n      [\r\n        `## API Report File for \"${collector.workingPackage.name}\"`,\r\n        ``,\r\n        `> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).`,\r\n        ``\r\n      ].join('\\n')\r\n    );\r\n\r\n    // Write the opening delimiter for the Markdown code fence\r\n    writer.writeLine('```ts\\n');\r\n\r\n    // Emit the triple slash directives\r\n    for (const typeDirectiveReference of Array.from(collector.dtsTypeReferenceDirectives).sort()) {\r\n      // https://github.com/microsoft/TypeScript/blob/611ebc7aadd7a44a4c0447698bfda9222a78cb66/src/compiler/declarationEmitter.ts#L162\r\n      writer.writeLine(`/// <reference types=\"${typeDirectiveReference}\" />`);\r\n    }\r\n    for (const libDirectiveReference of Array.from(collector.dtsLibReferenceDirectives).sort()) {\r\n      writer.writeLine(`/// <reference lib=\"${libDirectiveReference}\" />`);\r\n    }\r\n    writer.ensureSkippedLine();\r\n\r\n    // Emit the imports\r\n    for (const entity of collector.entities) {\r\n      if (entity.astEntity instanceof AstImport) {\r\n        DtsEmitHelpers.emitImport(writer, entity, entity.astEntity);\r\n      }\r\n    }\r\n    writer.ensureSkippedLine();\r\n\r\n    // Emit the regular declarations\r\n    for (const entity of collector.entities) {\r\n      const astEntity: AstEntity = entity.astEntity;\r\n      if (entity.consumable) {\r\n        // First, collect the list of export names for this symbol.  When reporting messages with\r\n        // ExtractorMessage.properties.exportName, this will enable us to emit the warning comments alongside\r\n        // the associated export statement.\r\n        interface IExportToEmit {\r\n          readonly exportName: string;\r\n          readonly associatedMessages: ExtractorMessage[];\r\n        }\r\n        const exportsToEmit: Map<string, IExportToEmit> = new Map<string, IExportToEmit>();\r\n\r\n        for (const exportName of entity.exportNames) {\r\n          if (!entity.shouldInlineExport) {\r\n            exportsToEmit.set(exportName, { exportName, associatedMessages: [] });\r\n          }\r\n        }\r\n\r\n        if (astEntity instanceof AstSymbol) {\r\n          // Emit all the declarations for this entity\r\n          for (const astDeclaration of astEntity.astDeclarations || []) {\r\n            // Get the messages associated with this declaration\r\n            const fetchedMessages: ExtractorMessage[] =\r\n              collector.messageRouter.fetchAssociatedMessagesForReviewFile(astDeclaration);\r\n\r\n            // Peel off the messages associated with an export statement and store them\r\n            // in IExportToEmit.associatedMessages (to be processed later).  The remaining messages will\r\n            // added to messagesToReport, to be emitted next to the declaration instead of the export statement.\r\n            const messagesToReport: ExtractorMessage[] = [];\r\n            for (const message of fetchedMessages) {\r\n              if (message.properties.exportName) {\r\n                const exportToEmit: IExportToEmit | undefined = exportsToEmit.get(\r\n                  message.properties.exportName\r\n                );\r\n                if (exportToEmit) {\r\n                  exportToEmit.associatedMessages.push(message);\r\n                  continue;\r\n                }\r\n              }\r\n              messagesToReport.push(message);\r\n            }\r\n\r\n            writer.ensureSkippedLine();\r\n            writer.write(ApiReportGenerator._getAedocSynopsis(collector, astDeclaration, messagesToReport));\r\n\r\n            const span: Span = new Span(astDeclaration.declaration);\r\n\r\n            const apiItemMetadata: ApiItemMetadata = collector.fetchApiItemMetadata(astDeclaration);\r\n            if (apiItemMetadata.isPreapproved) {\r\n              ApiReportGenerator._modifySpanForPreapproved(span);\r\n            } else {\r\n              ApiReportGenerator._modifySpan(collector, span, entity, astDeclaration, false);\r\n            }\r\n\r\n            span.writeModifiedText(writer);\r\n            writer.ensureNewLine();\r\n          }\r\n        }\r\n\r\n        if (astEntity instanceof AstNamespaceImport) {\r\n          const astModuleExportInfo: AstModuleExportInfo = astEntity.fetchAstModuleExportInfo(collector);\r\n\r\n          if (entity.nameForEmit === undefined) {\r\n            // This should never happen\r\n            throw new InternalError('referencedEntry.nameForEmit is undefined');\r\n          }\r\n\r\n          if (astModuleExportInfo.starExportedExternalModules.size > 0) {\r\n            // We could support this, but we would need to find a way to safely represent it.\r\n            throw new Error(\r\n              `The ${entity.nameForEmit} namespace import includes a start export, which is not supported:\\n` +\r\n                SourceFileLocationFormatter.formatDeclaration(astEntity.declaration)\r\n            );\r\n          }\r\n\r\n          // Emit a synthetic declaration for the namespace.  It will look like this:\r\n          //\r\n          //    declare namespace example {\r\n          //      export {\r\n          //        f1,\r\n          //        f2\r\n          //      }\r\n          //    }\r\n          //\r\n          // Note that we do not try to relocate f1()/f2() to be inside the namespace because other type\r\n          // signatures may reference them directly (without using the namespace qualifier).\r\n\r\n          writer.ensureSkippedLine();\r\n          writer.writeLine(`declare namespace ${entity.nameForEmit} {`);\r\n\r\n          // all local exports of local imported module are just references to top-level declarations\r\n          writer.increaseIndent();\r\n          writer.writeLine('export {');\r\n          writer.increaseIndent();\r\n\r\n          const exportClauses: string[] = [];\r\n          for (const [exportedName, exportedEntity] of astModuleExportInfo.exportedLocalEntities) {\r\n            const collectorEntity: CollectorEntity | undefined =\r\n              collector.tryGetCollectorEntity(exportedEntity);\r\n            if (collectorEntity === undefined) {\r\n              // This should never happen\r\n              // top-level exports of local imported module should be added as collector entities before\r\n              throw new InternalError(\r\n                `Cannot find collector entity for ${entity.nameForEmit}.${exportedEntity.localName}`\r\n              );\r\n            }\r\n\r\n            if (collectorEntity.nameForEmit === exportedName) {\r\n              exportClauses.push(collectorEntity.nameForEmit);\r\n            } else {\r\n              exportClauses.push(`${collectorEntity.nameForEmit} as ${exportedName}`);\r\n            }\r\n          }\r\n          writer.writeLine(exportClauses.join(',\\n'));\r\n\r\n          writer.decreaseIndent();\r\n          writer.writeLine('}'); // end of \"export { ... }\"\r\n          writer.decreaseIndent();\r\n          writer.writeLine('}'); // end of \"declare namespace { ... }\"\r\n        }\r\n\r\n        // Now emit the export statements for this entity.\r\n        for (const exportToEmit of exportsToEmit.values()) {\r\n          // Write any associated messages\r\n          if (exportToEmit.associatedMessages.length > 0) {\r\n            writer.ensureSkippedLine();\r\n            for (const message of exportToEmit.associatedMessages) {\r\n              ApiReportGenerator._writeLineAsComments(\r\n                writer,\r\n                'Warning: ' + message.formatMessageWithoutLocation()\r\n              );\r\n            }\r\n          }\r\n\r\n          DtsEmitHelpers.emitNamedExport(writer, exportToEmit.exportName, entity);\r\n        }\r\n        writer.ensureSkippedLine();\r\n      }\r\n    }\r\n\r\n    DtsEmitHelpers.emitStarExports(writer, collector);\r\n\r\n    // Write the unassociated warnings at the bottom of the file\r\n    const unassociatedMessages: ExtractorMessage[] =\r\n      collector.messageRouter.fetchUnassociatedMessagesForReviewFile();\r\n    if (unassociatedMessages.length > 0) {\r\n      writer.ensureSkippedLine();\r\n      ApiReportGenerator._writeLineAsComments(writer, 'Warnings were encountered during analysis:');\r\n      ApiReportGenerator._writeLineAsComments(writer, '');\r\n      for (const unassociatedMessage of unassociatedMessages) {\r\n        ApiReportGenerator._writeLineAsComments(\r\n          writer,\r\n          unassociatedMessage.formatMessageWithLocation(collector.workingPackage.packageFolder)\r\n        );\r\n      }\r\n    }\r\n\r\n    if (collector.workingPackage.tsdocComment === undefined) {\r\n      writer.ensureSkippedLine();\r\n      ApiReportGenerator._writeLineAsComments(writer, '(No @packageDocumentation comment for this package)');\r\n    }\r\n\r\n    // Write the closing delimiter for the Markdown code fence\r\n    writer.ensureSkippedLine();\r\n    writer.writeLine('```');\r\n\r\n    // Remove any trailing spaces\r\n    return writer.toString().replace(ApiReportGenerator._trimSpacesRegExp, '');\r\n  }\r\n\r\n  /**\r\n   * Before writing out a declaration, _modifySpan() applies various fixups to make it nice.\r\n   */\r\n  private static _modifySpan(\r\n    collector: Collector,\r\n    span: Span,\r\n    entity: CollectorEntity,\r\n    astDeclaration: AstDeclaration,\r\n    insideTypeLiteral: boolean\r\n  ): void {\r\n    // Should we process this declaration at all?\r\n    // eslint-disable-next-line no-bitwise\r\n    if ((astDeclaration.modifierFlags & ts.ModifierFlags.Private) !== 0) {\r\n      span.modification.skipAll();\r\n      return;\r\n    }\r\n\r\n    const previousSpan: Span | undefined = span.previousSibling;\r\n\r\n    let recurseChildren: boolean = true;\r\n    let sortChildren: boolean = false;\r\n\r\n    switch (span.kind) {\r\n      case ts.SyntaxKind.JSDocComment:\r\n        span.modification.skipAll();\r\n        // For now, we don't transform JSDoc comment nodes at all\r\n        recurseChildren = false;\r\n        break;\r\n\r\n      case ts.SyntaxKind.ExportKeyword:\r\n      case ts.SyntaxKind.DefaultKeyword:\r\n      case ts.SyntaxKind.DeclareKeyword:\r\n        // Delete any explicit \"export\" or \"declare\" keywords -- we will re-add them below\r\n        span.modification.skipAll();\r\n        break;\r\n\r\n      case ts.SyntaxKind.InterfaceKeyword:\r\n      case ts.SyntaxKind.ClassKeyword:\r\n      case ts.SyntaxKind.EnumKeyword:\r\n      case ts.SyntaxKind.NamespaceKeyword:\r\n      case ts.SyntaxKind.ModuleKeyword:\r\n      case ts.SyntaxKind.TypeKeyword:\r\n      case ts.SyntaxKind.FunctionKeyword:\r\n        // Replace the stuff we possibly deleted above\r\n        let replacedModifiers: string = '';\r\n\r\n        if (entity.shouldInlineExport) {\r\n          replacedModifiers = 'export ' + replacedModifiers;\r\n        }\r\n\r\n        if (previousSpan && previousSpan.kind === ts.SyntaxKind.SyntaxList) {\r\n          // If there is a previous span of type SyntaxList, then apply it before any other modifiers\r\n          // (e.g. \"abstract\") that appear there.\r\n          previousSpan.modification.prefix = replacedModifiers + previousSpan.modification.prefix;\r\n        } else {\r\n          // Otherwise just stick it in front of this span\r\n          span.modification.prefix = replacedModifiers + span.modification.prefix;\r\n        }\r\n        break;\r\n\r\n      case ts.SyntaxKind.SyntaxList:\r\n        if (span.parent) {\r\n          if (AstDeclaration.isSupportedSyntaxKind(span.parent.kind)) {\r\n            // If the immediate parent is an API declaration, and the immediate children are API declarations,\r\n            // then sort the children alphabetically\r\n            sortChildren = true;\r\n          } else if (span.parent.kind === ts.SyntaxKind.ModuleBlock) {\r\n            // Namespaces are special because their chain goes ModuleDeclaration -> ModuleBlock -> SyntaxList\r\n            sortChildren = true;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case ts.SyntaxKind.VariableDeclaration:\r\n        if (!span.parent) {\r\n          // The VariableDeclaration node is part of a VariableDeclarationList, however\r\n          // the Entry.followedSymbol points to the VariableDeclaration part because\r\n          // multiple definitions might share the same VariableDeclarationList.\r\n          //\r\n          // Since we are emitting a separate declaration for each one, we need to look upwards\r\n          // in the ts.Node tree and write a copy of the enclosing VariableDeclarationList\r\n          // content (e.g. \"var\" from \"var x=1, y=2\").\r\n          const list: ts.VariableDeclarationList | undefined = TypeScriptHelpers.matchAncestor(span.node, [\r\n            ts.SyntaxKind.VariableDeclarationList,\r\n            ts.SyntaxKind.VariableDeclaration\r\n          ]);\r\n          if (!list) {\r\n            // This should not happen unless the compiler API changes somehow\r\n            throw new InternalError('Unsupported variable declaration');\r\n          }\r\n          const listPrefix: string = list\r\n            .getSourceFile()\r\n            .text.substring(list.getStart(), list.declarations[0].getStart());\r\n          span.modification.prefix = listPrefix + span.modification.prefix;\r\n          span.modification.suffix = ';';\r\n\r\n          if (entity.shouldInlineExport) {\r\n            span.modification.prefix = 'export ' + span.modification.prefix;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case ts.SyntaxKind.Identifier:\r\n        const referencedEntity: CollectorEntity | undefined = collector.tryGetEntityForNode(\r\n          span.node as ts.Identifier\r\n        );\r\n\r\n        if (referencedEntity) {\r\n          if (!referencedEntity.nameForEmit) {\r\n            // This should never happen\r\n            throw new InternalError('referencedEntry.nameForEmit is undefined');\r\n          }\r\n\r\n          span.modification.prefix = referencedEntity.nameForEmit;\r\n          // For debugging:\r\n          // span.modification.prefix += '/*R=FIX*/';\r\n        } else {\r\n          // For debugging:\r\n          // span.modification.prefix += '/*R=KEEP*/';\r\n        }\r\n\r\n        break;\r\n\r\n      case ts.SyntaxKind.TypeLiteral:\r\n        insideTypeLiteral = true;\r\n        break;\r\n\r\n      case ts.SyntaxKind.ImportType:\r\n        DtsEmitHelpers.modifyImportTypeSpan(\r\n          collector,\r\n          span,\r\n          astDeclaration,\r\n          (childSpan, childAstDeclaration) => {\r\n            ApiReportGenerator._modifySpan(\r\n              collector,\r\n              childSpan,\r\n              entity,\r\n              childAstDeclaration,\r\n              insideTypeLiteral\r\n            );\r\n          }\r\n        );\r\n        break;\r\n    }\r\n\r\n    if (recurseChildren) {\r\n      for (const child of span.children) {\r\n        let childAstDeclaration: AstDeclaration = astDeclaration;\r\n\r\n        if (AstDeclaration.isSupportedSyntaxKind(child.kind)) {\r\n          childAstDeclaration = collector.astSymbolTable.getChildAstDeclarationByNode(\r\n            child.node,\r\n            astDeclaration\r\n          );\r\n\r\n          if (sortChildren) {\r\n            span.modification.sortChildren = true;\r\n            child.modification.sortKey = Collector.getSortKeyIgnoringUnderscore(\r\n              childAstDeclaration.astSymbol.localName\r\n            );\r\n          }\r\n\r\n          if (!insideTypeLiteral) {\r\n            const messagesToReport: ExtractorMessage[] =\r\n              collector.messageRouter.fetchAssociatedMessagesForReviewFile(childAstDeclaration);\r\n            const aedocSynopsis: string = ApiReportGenerator._getAedocSynopsis(\r\n              collector,\r\n              childAstDeclaration,\r\n              messagesToReport\r\n            );\r\n\r\n            child.modification.prefix = aedocSynopsis + child.modification.prefix;\r\n          }\r\n        }\r\n\r\n        ApiReportGenerator._modifySpan(collector, child, entity, childAstDeclaration, insideTypeLiteral);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For declarations marked as `@preapproved`, this is used instead of _modifySpan().\r\n   */\r\n  private static _modifySpanForPreapproved(span: Span): void {\r\n    // Match something like this:\r\n    //\r\n    //   ClassDeclaration:\r\n    //     SyntaxList:\r\n    //       ExportKeyword:  pre=[export] sep=[ ]\r\n    //       DeclareKeyword:  pre=[declare] sep=[ ]\r\n    //     ClassKeyword:  pre=[class] sep=[ ]\r\n    //     Identifier:  pre=[_PreapprovedClass] sep=[ ]\r\n    //     FirstPunctuation:  pre=[{] sep=[\\n\\n    ]\r\n    //     SyntaxList:\r\n    //       ...\r\n    //     CloseBraceToken:  pre=[}]\r\n    //\r\n    // or this:\r\n    //   ModuleDeclaration:\r\n    //     SyntaxList:\r\n    //       ExportKeyword:  pre=[export] sep=[ ]\r\n    //       DeclareKeyword:  pre=[declare] sep=[ ]\r\n    //     NamespaceKeyword:  pre=[namespace] sep=[ ]\r\n    //     Identifier:  pre=[_PreapprovedNamespace] sep=[ ]\r\n    //     ModuleBlock:\r\n    //       FirstPunctuation:  pre=[{] sep=[\\n\\n    ]\r\n    //       SyntaxList:\r\n    //         ...\r\n    //       CloseBraceToken:  pre=[}]\r\n    //\r\n    // And reduce it to something like this:\r\n    //\r\n    //   // @internal (undocumented)\r\n    //   class _PreapprovedClass { /* (preapproved) */ }\r\n    //\r\n\r\n    let skipRest: boolean = false;\r\n    for (const child of span.children) {\r\n      if (skipRest || child.kind === ts.SyntaxKind.SyntaxList || child.kind === ts.SyntaxKind.JSDocComment) {\r\n        child.modification.skipAll();\r\n      }\r\n      if (child.kind === ts.SyntaxKind.Identifier) {\r\n        skipRest = true;\r\n        child.modification.omitSeparatorAfter = true;\r\n        child.modification.suffix = ' { /* (preapproved) */ }';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes a synopsis of the AEDoc comments, which indicates the release tag,\r\n   * whether the item has been documented, and any warnings that were detected\r\n   * by the analysis.\r\n   */\r\n  private static _getAedocSynopsis(\r\n    collector: Collector,\r\n    astDeclaration: AstDeclaration,\r\n    messagesToReport: ExtractorMessage[]\r\n  ): string {\r\n    const writer: IndentedWriter = new IndentedWriter();\r\n\r\n    for (const message of messagesToReport) {\r\n      ApiReportGenerator._writeLineAsComments(writer, 'Warning: ' + message.formatMessageWithoutLocation());\r\n    }\r\n\r\n    if (!collector.isAncillaryDeclaration(astDeclaration)) {\r\n      const footerParts: string[] = [];\r\n      const apiItemMetadata: ApiItemMetadata = collector.fetchApiItemMetadata(astDeclaration);\r\n      if (!apiItemMetadata.releaseTagSameAsParent) {\r\n        if (apiItemMetadata.effectiveReleaseTag !== ReleaseTag.None) {\r\n          footerParts.push(ReleaseTag.getTagName(apiItemMetadata.effectiveReleaseTag));\r\n        }\r\n      }\r\n\r\n      if (apiItemMetadata.isSealed) {\r\n        footerParts.push('@sealed');\r\n      }\r\n\r\n      if (apiItemMetadata.isVirtual) {\r\n        footerParts.push('@virtual');\r\n      }\r\n\r\n      if (apiItemMetadata.isOverride) {\r\n        footerParts.push('@override');\r\n      }\r\n\r\n      if (apiItemMetadata.isEventProperty) {\r\n        footerParts.push('@eventProperty');\r\n      }\r\n\r\n      if (apiItemMetadata.tsdocComment) {\r\n        if (apiItemMetadata.tsdocComment.deprecatedBlock) {\r\n          footerParts.push('@deprecated');\r\n        }\r\n      }\r\n\r\n      if (apiItemMetadata.needsDocumentation) {\r\n        footerParts.push('(undocumented)');\r\n      }\r\n\r\n      if (footerParts.length > 0) {\r\n        if (messagesToReport.length > 0) {\r\n          ApiReportGenerator._writeLineAsComments(writer, ''); // skip a line after the warnings\r\n        }\r\n\r\n        ApiReportGenerator._writeLineAsComments(writer, footerParts.join(' '));\r\n      }\r\n    }\r\n\r\n    return writer.toString();\r\n  }\r\n\r\n  private static _writeLineAsComments(writer: IndentedWriter, line: string): void {\r\n    const lines: string[] = Text.convertToLf(line).split('\\n');\r\n    for (const realLine of lines) {\r\n      writer.write('// ');\r\n      writer.write(realLine);\r\n      writer.writeLine();\r\n    }\r\n  }\r\n}\r\n"]}