import { Reader } from 'protobufjs/minimal';
import { v4 as uuid } from 'uuid';
import * as proto from '../../proto/waku/v2/store';
export var PageDirection;
(function (PageDirection) {
    PageDirection["BACKWARD"] = "backward";
    PageDirection["FORWARD"] = "forward";
})(PageDirection || (PageDirection = {}));
var HistoryRPC = /** @class */ (function () {
    function HistoryRPC(proto) {
        this.proto = proto;
    }
    /**
     * Create History Query.
     */
    HistoryRPC.createQuery = function (params) {
        var direction = directionToProto(params.pageDirection);
        var pagingInfo = {
            pageSize: params.pageSize,
            cursor: params.cursor,
            direction: direction,
        };
        var contentFilters = params.contentTopics.map(function (contentTopic) {
            return { contentTopic: contentTopic };
        });
        return new HistoryRPC({
            requestId: uuid(),
            query: {
                pubSubTopic: params.pubSubTopic,
                contentFilters: contentFilters,
                pagingInfo: pagingInfo,
                startTime: params.startTime,
                endTime: params.endTime,
            },
            response: undefined,
        });
    };
    HistoryRPC.decode = function (bytes) {
        var res = proto.HistoryRPC.decode(Reader.create(bytes));
        return new HistoryRPC(res);
    };
    HistoryRPC.prototype.encode = function () {
        return proto.HistoryRPC.encode(this.proto).finish();
    };
    Object.defineProperty(HistoryRPC.prototype, "query", {
        get: function () {
            return this.proto.query;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HistoryRPC.prototype, "response", {
        get: function () {
            return this.proto.response;
        },
        enumerable: false,
        configurable: true
    });
    return HistoryRPC;
}());
export { HistoryRPC };
function directionToProto(pageDirection) {
    switch (pageDirection) {
        case PageDirection.BACKWARD:
            return proto.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
        case PageDirection.FORWARD:
            return proto.PagingInfo_Direction.DIRECTION_FORWARD;
        default:
            return proto.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
    }
}
//# sourceMappingURL=history_rpc.js.map