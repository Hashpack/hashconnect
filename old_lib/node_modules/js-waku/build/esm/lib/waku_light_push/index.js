var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import concat from 'it-concat';
import lp from 'it-length-prefixed';
import pipe from 'it-pipe';
import { PushResponse } from '../../proto/waku/v2/light_push';
import { getPeersForProtocol, selectRandomPeer } from '../select_peer';
import { DefaultPubSubTopic } from '../waku';
import { PushRPC } from './push_rpc';
export var LightPushCodec = '/vac/waku/lightpush/2.0.0-beta1';
export { PushResponse };
/**
 * Implements the [Waku v2 Light Push protocol](https://rfc.vac.dev/spec/19/).
 */
var WakuLightPush = /** @class */ (function () {
    function WakuLightPush(libp2p, options) {
        this.libp2p = libp2p;
        if (options === null || options === void 0 ? void 0 : options.pubSubTopic) {
            this.pubSubTopic = options.pubSubTopic;
        }
        else {
            this.pubSubTopic = DefaultPubSubTopic;
        }
    }
    WakuLightPush.prototype.push = function (message, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var peer, connection, stream, pubSubTopic, query, res, response, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (opts === null || opts === void 0 ? void 0 : opts.peerId) {
                            peer = this.libp2p.peerStore.get(opts.peerId);
                            if (!peer)
                                throw 'Peer is unknown';
                        }
                        else {
                            peer = this.randomPeer;
                        }
                        if (!peer)
                            throw 'No peer available';
                        if (!peer.protocols.includes(LightPushCodec))
                            throw 'Peer does not register waku light push protocol';
                        connection = this.libp2p.connectionManager.get(peer.id);
                        if (!connection)
                            throw 'Failed to get a connection to the peer';
                        return [4 /*yield*/, connection.newStream(LightPushCodec)];
                    case 1:
                        stream = (_a.sent()).stream;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        pubSubTopic = (opts === null || opts === void 0 ? void 0 : opts.pubSubTopic)
                            ? opts.pubSubTopic
                            : this.pubSubTopic;
                        query = PushRPC.createRequest(message, pubSubTopic);
                        return [4 /*yield*/, pipe([query.encode()], lp.encode(), stream, lp.decode(), concat)];
                    case 3:
                        res = _a.sent();
                        try {
                            response = PushRPC.decode(res.slice()).response;
                            if (!response) {
                                console.log('No response in PushRPC');
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, response];
                        }
                        catch (err) {
                            console.log('Failed to decode push reply', err);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        console.log('Failed to send waku light push request', err_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, null];
                }
            });
        });
    };
    Object.defineProperty(WakuLightPush.prototype, "peers", {
        /**
         * Returns known peers from the address book (`libp2p.peerStore`) that support
         * light push protocol. Waku may or  may not be currently connected to these peers.
         */
        get: function () {
            return getPeersForProtocol(this.libp2p, LightPushCodec);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WakuLightPush.prototype, "randomPeer", {
        /**
         * Returns a random peer that supports light push protocol from the address
         * book (`libp2p.peerStore`). Waku may or  may not be currently connected to
         * this peer.
         */
        get: function () {
            return selectRandomPeer(this.peers);
        },
        enumerable: false,
        configurable: true
    });
    return WakuLightPush;
}());
export { WakuLightPush };
//# sourceMappingURL=index.js.map