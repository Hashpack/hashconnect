{"version":3,"file":"CommandLineIntegerListParameter.js","sourceRoot":"","sources":["../../src/parameters/CommandLineIntegerListParameter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,+CAA2F;AAC3F,2EAAwE;AAExE;;;GAGG;AACH,MAAa,+BAAgC,SAAQ,8CAAgC;IAGnF,gBAAgB;IAChB,YAAmB,UAA6C;QAC9D,KAAK,CAAC,UAAU,CAAC,CAAC;QAJZ,YAAO,GAAa,EAAE,CAAC;IAK/B,CAAC;IAED,8CAA8C;IAC9C,IAAW,IAAI;QACb,OAAO,sCAAwB,CAAC,WAAW,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,8DAA8D;IACvD,SAAS,CAAC,IAAS;QACxB,qDAAqD;QACrD,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9B;YACD,KAAK,MAAM,SAAS,IAAI,IAAI,EAAE;gBAC5B,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;oBACjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;iBAC9B;aACF;YACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,OAAO;SACR;QAED,mEAAmE;QACnE,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,EAAE;YAC1C,MAAM,MAAM,GAAyB,qDAAyB,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACrG,IAAI,MAAM,EAAE;gBACV,MAAM,YAAY,GAAa,EAAE,CAAC;gBAClC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;oBAC1B,MAAM,MAAM,GAAW,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;oBAC3C,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBAC5C,MAAM,IAAI,KAAK,CACb,kBAAkB,KAAK,gCAAgC;4BACrD,IAAI,IAAI,CAAC,mBAAmB,iCAAiC,CAChE,CAAC;qBACH;oBACD,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC3B;gBACD,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;gBAC5B,OAAO;aACR;SACF;QAED,uCAAuC;QAEvC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACH,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,mEAAmE;IAC5D,eAAe,CAAC,OAAiB;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7B;SACF;IACH,CAAC;CACF;AA9ED,0EA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ICommandLineIntegerListDefinition } from './CommandLineDefinition';\r\nimport { CommandLineParameterWithArgument, CommandLineParameterKind } from './BaseClasses';\r\nimport { EnvironmentVariableParser } from './EnvironmentVariableParser';\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineIntegerListParameter}.\r\n * @public\r\n */\r\nexport class CommandLineIntegerListParameter extends CommandLineParameterWithArgument {\r\n  private _values: number[] = [];\r\n\r\n  /** @internal */\r\n  public constructor(definition: ICommandLineIntegerListDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.IntegerList;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public _setValue(data: any): void {\r\n    // If argparse passed us a value, confirm it is valid\r\n    if (data !== null && data !== undefined) {\r\n      if (!Array.isArray(data)) {\r\n        this.reportInvalidData(data);\r\n      }\r\n      for (const arrayItem of data) {\r\n        if (typeof arrayItem !== 'number') {\r\n          this.reportInvalidData(data);\r\n        }\r\n      }\r\n      this._values = data;\r\n      return;\r\n    }\r\n\r\n    // If an environment variable exists, attempt to parse it as a list\r\n    if (this.environmentVariable !== undefined) {\r\n      const values: string[] | undefined = EnvironmentVariableParser.parseAsList(this.environmentVariable);\r\n      if (values) {\r\n        const parsedValues: number[] = [];\r\n        for (const value of values) {\r\n          const parsed: number = parseInt(value, 10);\r\n          if (isNaN(parsed) || value.indexOf('.') >= 0) {\r\n            throw new Error(\r\n              `Invalid value \"${value}\" for the environment variable` +\r\n                ` ${this.environmentVariable}.  It must be an integer value.`\r\n            );\r\n          }\r\n          parsedValues.push(parsed);\r\n        }\r\n        this._values = parsedValues;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // (No default value for integer lists)\r\n\r\n    this._values = [];\r\n  }\r\n\r\n  /**\r\n   * Returns the integer arguments for an integer list parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The array will be empty if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get values(): ReadonlyArray<number> {\r\n    return this._values;\r\n  }\r\n\r\n  /** {@inheritDoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.values.length > 0) {\r\n      for (const value of this.values) {\r\n        argList.push(this.longName);\r\n        argList.push(String(value));\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}