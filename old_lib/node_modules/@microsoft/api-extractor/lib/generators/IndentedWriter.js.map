{"version":3,"file":"IndentedWriter.js","sourceRoot":"","sources":["../../src/generators/IndentedWriter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { StringBuilder, IStringBuilder } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * A utility for writing indented text.\r\n *\r\n * @remarks\r\n *\r\n * Note that the indentation is inserted at the last possible opportunity.\r\n * For example, this code...\r\n *\r\n * ```ts\r\n *   writer.write('begin\\n');\r\n *   writer.increaseIndent();\r\n *   writer.write('one\\ntwo\\n');\r\n *   writer.decreaseIndent();\r\n *   writer.increaseIndent();\r\n *   writer.decreaseIndent();\r\n *   writer.write('end');\r\n * ```\r\n *\r\n * ...would produce this output:\r\n *\r\n * ```\r\n *   begin\r\n *     one\r\n *     two\r\n *   end\r\n * ```\r\n */\r\nexport class IndentedWriter {\r\n  /**\r\n   * The text characters used to create one level of indentation.\r\n   * Two spaces by default.\r\n   */\r\n  public defaultIndentPrefix: string = '    ';\r\n\r\n  /**\r\n   * Whether to indent blank lines\r\n   */\r\n  public indentBlankLines: boolean = false;\r\n\r\n  /**\r\n   * Trims leading spaces from the input text before applying the indent.\r\n   *\r\n   * @remarks\r\n   * Consider the following example:\r\n   *\r\n   * ```ts\r\n   * indentedWriter.increaseIndent('    '); // four spaces\r\n   * indentedWriter.write('  a\\n  b  c\\n');\r\n   * indentedWriter.decreaseIndent();\r\n   * ```\r\n   *\r\n   * Normally the output would be indented by 6 spaces: 4 from `increaseIndent()`, plus the 2 spaces\r\n   * from `write()`:\r\n   * ```\r\n   *       a\r\n   *       b  c\r\n   * ```\r\n   *\r\n   * Setting `trimLeadingSpaces=true` will trim the leading spaces, so that the lines are indented\r\n   * by 4 spaces only:\r\n   * ```\r\n   *     a\r\n   *     b  c\r\n   * ```\r\n   */\r\n  public trimLeadingSpaces: boolean = false;\r\n\r\n  private readonly _builder: IStringBuilder;\r\n\r\n  private _latestChunk: string | undefined;\r\n  private _previousChunk: string | undefined;\r\n  private _atStartOfLine: boolean;\r\n\r\n  private readonly _indentStack: string[];\r\n  private _indentText: string;\r\n\r\n  private _previousLineIsBlank: boolean;\r\n  private _currentLineIsBlank: boolean;\r\n\r\n  public constructor(builder?: IStringBuilder) {\r\n    this._builder = builder === undefined ? new StringBuilder() : builder;\r\n    this._latestChunk = undefined;\r\n    this._previousChunk = undefined;\r\n    this._atStartOfLine = true;\r\n    this._previousLineIsBlank = true;\r\n    this._currentLineIsBlank = true;\r\n\r\n    this._indentStack = [];\r\n    this._indentText = '';\r\n  }\r\n\r\n  /**\r\n   * Retrieves the output that was built so far.\r\n   */\r\n  public getText(): string {\r\n    return this._builder.toString();\r\n  }\r\n\r\n  public toString(): string {\r\n    return this.getText();\r\n  }\r\n\r\n  /**\r\n   * Increases the indentation.  Normally the indentation is two spaces,\r\n   * however an arbitrary prefix can optional be specified.  (For example,\r\n   * the prefix could be \"// \" to indent and comment simultaneously.)\r\n   * Each call to IndentedWriter.increaseIndent() must be followed by a\r\n   * corresponding call to IndentedWriter.decreaseIndent().\r\n   */\r\n  public increaseIndent(indentPrefix?: string): void {\r\n    this._indentStack.push(indentPrefix !== undefined ? indentPrefix : this.defaultIndentPrefix);\r\n    this._updateIndentText();\r\n  }\r\n\r\n  /**\r\n   * Decreases the indentation, reverting the effect of the corresponding call\r\n   * to IndentedWriter.increaseIndent().\r\n   */\r\n  public decreaseIndent(): void {\r\n    this._indentStack.pop();\r\n    this._updateIndentText();\r\n  }\r\n\r\n  /**\r\n   * A shorthand for ensuring that increaseIndent()/decreaseIndent() occur\r\n   * in pairs.\r\n   */\r\n  public indentScope(scope: () => void, indentPrefix?: string): void {\r\n    this.increaseIndent(indentPrefix);\r\n    scope();\r\n    this.decreaseIndent();\r\n  }\r\n\r\n  /**\r\n   * Adds a newline if the file pointer is not already at the start of the line (or start of the stream).\r\n   */\r\n  public ensureNewLine(): void {\r\n    const lastCharacter: string = this.peekLastCharacter();\r\n    if (lastCharacter !== '\\n' && lastCharacter !== '') {\r\n      this._writeNewLine();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds up to two newlines to ensure that there is a blank line above the current position.\r\n   * The start of the stream is considered to be a blank line, so `ensureSkippedLine()` has no effect\r\n   * unless some text has been written.\r\n   */\r\n  public ensureSkippedLine(): void {\r\n    this.ensureNewLine();\r\n    if (!this._previousLineIsBlank) {\r\n      this._writeNewLine();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the last character that was written, or an empty string if no characters have been written yet.\r\n   */\r\n  public peekLastCharacter(): string {\r\n    if (this._latestChunk !== undefined) {\r\n      return this._latestChunk.substr(-1, 1);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Returns the second to last character that was written, or an empty string if less than one characters\r\n   * have been written yet.\r\n   */\r\n  public peekSecondLastCharacter(): string {\r\n    if (this._latestChunk !== undefined) {\r\n      if (this._latestChunk.length > 1) {\r\n        return this._latestChunk.substr(-2, 1);\r\n      }\r\n      if (this._previousChunk !== undefined) {\r\n        return this._previousChunk.substr(-1, 1);\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Writes some text to the internal string buffer, applying indentation according\r\n   * to the current indentation level.  If the string contains multiple newlines,\r\n   * each line will be indented separately.\r\n   */\r\n  public write(message: string): void {\r\n    if (message.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // If there are no newline characters, then append the string verbatim\r\n    if (!/[\\r\\n]/.test(message)) {\r\n      this._writeLinePart(message);\r\n      return;\r\n    }\r\n\r\n    // Otherwise split the lines and write each one individually\r\n    let first: boolean = true;\r\n    for (const linePart of message.split('\\n')) {\r\n      if (!first) {\r\n        this._writeNewLine();\r\n      } else {\r\n        first = false;\r\n      }\r\n      if (linePart) {\r\n        this._writeLinePart(linePart.replace(/[\\r]/g, ''));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A shorthand for writing an optional message, followed by a newline.\r\n   * Indentation is applied following the semantics of IndentedWriter.write().\r\n   */\r\n  public writeLine(message: string = ''): void {\r\n    if (message.length > 0) {\r\n      this.write(message);\r\n    }\r\n    this._writeNewLine();\r\n  }\r\n\r\n  /**\r\n   * Writes a string that does not contain any newline characters.\r\n   */\r\n  private _writeLinePart(message: string): void {\r\n    let trimmedMessage: string = message;\r\n\r\n    if (this.trimLeadingSpaces && this._atStartOfLine) {\r\n      trimmedMessage = message.replace(/^ +/, '');\r\n    }\r\n\r\n    if (trimmedMessage.length > 0) {\r\n      if (this._atStartOfLine && this._indentText.length > 0) {\r\n        this._write(this._indentText);\r\n      }\r\n      this._write(trimmedMessage);\r\n      if (this._currentLineIsBlank) {\r\n        if (/\\S/.test(trimmedMessage)) {\r\n          this._currentLineIsBlank = false;\r\n        }\r\n      }\r\n      this._atStartOfLine = false;\r\n    }\r\n  }\r\n\r\n  private _writeNewLine(): void {\r\n    if (this.indentBlankLines) {\r\n      if (this._atStartOfLine && this._indentText.length > 0) {\r\n        this._write(this._indentText);\r\n      }\r\n    }\r\n\r\n    this._previousLineIsBlank = this._currentLineIsBlank;\r\n    this._write('\\n');\r\n    this._currentLineIsBlank = true;\r\n    this._atStartOfLine = true;\r\n  }\r\n\r\n  private _write(s: string): void {\r\n    this._previousChunk = this._latestChunk;\r\n    this._latestChunk = s;\r\n    this._builder.append(s);\r\n  }\r\n\r\n  private _updateIndentText(): void {\r\n    this._indentText = this._indentStack.join('');\r\n  }\r\n}\r\n"]}