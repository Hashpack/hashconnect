export = streamToMaConnection;
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
 *
 * @typedef {Object} Timeline
 * @property {number} open - connection opening timestamp.
 * @property {number} [upgraded] - connection upgraded timestamp.
 * @property {number} [close]
 */
/**
 * Convert a duplex iterable into a MultiaddrConnection.
 * https://github.com/libp2p/interface-transport#multiaddrconnection
 *
 * @param {object} streamProperties
 * @param {MuxedStream} streamProperties.stream
 * @param {Multiaddr} streamProperties.remoteAddr
 * @param {Multiaddr} streamProperties.localAddr
 * @param {object} [options]
 * @param {AbortSignal} [options.signal]
 * @returns {import('libp2p-interfaces/src/transport/types').MultiaddrConnection}
 */
declare function streamToMaConnection({ stream, remoteAddr, localAddr }: {
    stream: MuxedStream;
    remoteAddr: Multiaddr;
    localAddr: Multiaddr;
}, options?: {
    signal?: AbortSignal | undefined;
} | undefined): import('libp2p-interfaces/src/transport/types').MultiaddrConnection;
declare namespace streamToMaConnection {
    export { Multiaddr, MuxedStream, Timeline };
}
type MuxedStream = import('libp2p-interfaces/src/stream-muxer/types').MuxedStream;
type Multiaddr = import('multiaddr').Multiaddr;
type Timeline = {
    /**
     * - connection opening timestamp.
     */
    open: number;
    /**
     * - connection upgraded timestamp.
     */
    upgraded?: number | undefined;
    close?: number | undefined;
};
//# sourceMappingURL=stream-to-ma-conn.d.ts.map