var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from 'axios';
import debug from 'debug';
import { shuffle } from 'libp2p-gossipsub/src/utils';
var dbg = debug('waku:discovery');
var DefaultWantedNumber = 1;
/**
 * GET list of nodes from remote HTTP host.
 *
 * Default behaviour is to return nodes hosted by Status.
 *
 * @param path The property path to access the node list. The result should be
 * a string, a string array or an object. If the result is an object then the
 * values of the objects are used as multiaddresses. For example, if the GET
 * request returns `{ foo: { bar: [address1, address2] } }` then `path` should be
 * `[ "foo", "bar" ]`.
 * @param url Remote host containing bootstrap peers in JSON format.
 * @param wantedNumber The number of connections desired. Defaults to [DefaultWantedNumber].
 *
 * @returns An array of multiaddresses.
 * @throws If the remote host is unreachable or the response cannot be parsed
 * according to the passed _path_.
 */
export function getBootstrapNodes(path, url, wantedNumber) {
    if (path === void 0) { path = ['fleets', 'wakuv2.prod', 'waku-websocket']; }
    if (url === void 0) { url = 'https://fleets.status.im/'; }
    if (wantedNumber === void 0) { wantedNumber = DefaultWantedNumber; }
    return __awaiter(this, void 0, void 0, function () {
        var res, nodes, _i, path_1, prop;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (wantedNumber <= 0) {
                        return [2 /*return*/, []];
                    }
                    return [4 /*yield*/, axios.get(url, {
                            headers: { 'Content-Type': 'application/json' },
                        })];
                case 1:
                    res = _a.sent();
                    nodes = res.data;
                    for (_i = 0, path_1 = path; _i < path_1.length; _i++) {
                        prop = path_1[_i];
                        if (nodes[prop] === undefined) {
                            dbg("Failed to retrieve bootstrap nodes: " + prop + " does not exist on ", nodes);
                            throw "Failed to retrieve bootstrap nodes: " + prop + " does not exist on " + JSON.stringify(nodes);
                        }
                        nodes = nodes[prop];
                    }
                    if (Array.isArray(nodes)) {
                        return [2 /*return*/, getPseudoRandomSubset(nodes, wantedNumber)];
                    }
                    if (typeof nodes === 'string') {
                        return [2 /*return*/, [nodes]];
                    }
                    if (typeof nodes === 'object') {
                        nodes = Object.values(nodes);
                        return [2 /*return*/, getPseudoRandomSubset(nodes, wantedNumber)];
                    }
                    throw "Failed to retrieve bootstrap nodes: response format is not supported: " + JSON.stringify(nodes);
            }
        });
    });
}
export function getPseudoRandomSubset(values, wantedNumber) {
    if (values.length <= wantedNumber) {
        return values;
    }
    return shuffle(values).slice(0, wantedNumber);
}
//# sourceMappingURL=discovery.js.map