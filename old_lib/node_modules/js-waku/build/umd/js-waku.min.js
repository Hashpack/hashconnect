!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.jswaku=t():e.jswaku=t()}(this,(function(){return(()=>{var e,t={63607:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.proto=t.StoreCodec=t.WakuStore=t.PageDirection=t.RelayCodecs=t.WakuRelay=t.PushResponse=t.LightPushCodec=t.WakuLightPush=t.getPublicKey=t.generateSymmetricKey=t.generatePrivateKey=t.WakuMessage=t.DefaultPubSubTopic=t.Waku=t.utils=t.getBootstrapNodes=void 0;var n=o(56860);Object.defineProperty(t,"getBootstrapNodes",{enumerable:!0,get:function(){return n.getBootstrapNodes}}),t.utils=s(o(61721));var a=o(90607);Object.defineProperty(t,"Waku",{enumerable:!0,get:function(){return a.Waku}}),Object.defineProperty(t,"DefaultPubSubTopic",{enumerable:!0,get:function(){return a.DefaultPubSubTopic}});var u=o(92560);Object.defineProperty(t,"WakuMessage",{enumerable:!0,get:function(){return u.WakuMessage}});var c=o(48340);Object.defineProperty(t,"generatePrivateKey",{enumerable:!0,get:function(){return c.generatePrivateKey}}),Object.defineProperty(t,"generateSymmetricKey",{enumerable:!0,get:function(){return c.generateSymmetricKey}}),Object.defineProperty(t,"getPublicKey",{enumerable:!0,get:function(){return c.getPublicKey}});var l=o(17087);Object.defineProperty(t,"WakuLightPush",{enumerable:!0,get:function(){return l.WakuLightPush}}),Object.defineProperty(t,"LightPushCodec",{enumerable:!0,get:function(){return l.LightPushCodec}}),Object.defineProperty(t,"PushResponse",{enumerable:!0,get:function(){return l.PushResponse}});var d=o(22979);Object.defineProperty(t,"WakuRelay",{enumerable:!0,get:function(){return d.WakuRelay}}),Object.defineProperty(t,"RelayCodecs",{enumerable:!0,get:function(){return d.RelayCodecs}});var p=o(95960);Object.defineProperty(t,"PageDirection",{enumerable:!0,get:function(){return p.PageDirection}}),Object.defineProperty(t,"WakuStore",{enumerable:!0,get:function(){return p.WakuStore}}),Object.defineProperty(t,"StoreCodec",{enumerable:!0,get:function(){return p.StoreCodec}}),t.proto=s(o(15888))},56860:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getPseudoRandomSubset=t.getBootstrapNodes=void 0;const i=r(o(9669)),s=r(o(11227)),n=o(60663),a=s.default("waku:discovery");function u(e,t){return e.length<=t?e:n.shuffle(e).slice(0,t)}t.getBootstrapNodes=async function(e=["fleets","wakuv2.prod","waku-websocket"],t="https://fleets.status.im/",o=1){if(o<=0)return[];let r=(await i.default.get(t,{headers:{"Content-Type":"application/json"}})).data;for(const t of e){if(void 0===r[t])throw a(`Failed to retrieve bootstrap nodes: ${t} does not exist on `,r),`Failed to retrieve bootstrap nodes: ${t} does not exist on ${JSON.stringify(r)}`;r=r[t]}if(Array.isArray(r))return u(r,o);if("string"==typeof r)return[r];if("object"==typeof r)return r=Object.values(r),u(r,o);throw`Failed to retrieve bootstrap nodes: response format is not supported: ${JSON.stringify(r)}`},t.getPseudoRandomSubset=u},65187:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPeersForProtocol=t.selectRandomPeer=void 0,t.selectRandomPeer=function(e){if(0!==e.length)return e[Math.round(Math.random()*(e.length-1))]},t.getPeersForProtocol=function(e,t){return Array.from(e.peerStore.peers.values()).filter((e=>e.protocols.includes(t)))}},61721:(e,t,o)=>{"use strict";var r=o(48764).Buffer;function i(e){return"string"==typeof e?r.from(e.replace(/^0x/i,""),"hex"):r.from(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.equalByteArrays=t.bufToHex=t.hexToBuf=void 0,t.hexToBuf=i,t.bufToHex=function(e){return r.from(e).toString("hex")},t.equalByteArrays=function(e,t){let o,s;return o="string"==typeof e?i(e):r.from(e),s="string"==typeof t?i(t):r.from(t),0===o.compare(s)}},90607:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Waku=t.DefaultPubSubTopic=t.DefaultRelayKeepAliveValueSecs=t.DefaultPingKeepAliveValueSecs=void 0;const i=o(88895),s=r(o(11227)),n=r(o(51613)),a=r(o(63100)),u=r(o(1267)),c=r(o(29846)),l=r(o(70040)),d=r(o(75466)),p=o(46584),f=r(o(88785)),g=o(56860),h=o(65187),b=o(17087),y=o(92560),m=o(22979),v=o(99123),P=o(95960),S=c.default.prototype[Symbol.toStringTag];t.DefaultPingKeepAliveValueSecs=0,t.DefaultRelayKeepAliveValueSecs=300,t.DefaultPubSubTopic="/waku/2/default-waku/proto";const T=s.default("waku:waku");class R{constructor(e,o,r,i){var s;this.libp2p=o,this.relay=o.pubsub,this.store=r,this.lightPush=i,this.pingKeepAliveTimers={},this.relayKeepAliveTimers={};const n=e.pingKeepAlive||t.DefaultPingKeepAliveValueSecs,a=e.relayKeepAlive||t.DefaultRelayKeepAliveValueSecs;o.connectionManager.on("peer:connect",(e=>{this.startKeepAlive(e.remotePeer,n,a)})),o.connectionManager.on("peer:disconnect",(e=>{this.stopKeepAlive(e.remotePeer)})),null===(s=null==e?void 0:e.decryptionKeys)||void 0===s||s.forEach(this.addDecryptionKey)}static async create(e){var t,o,r;const s=Object.assign({},null==e?void 0:e.libp2p);if(s.config=Object.assign({transport:{[S]:{filter:l.default.all}}},null===(t=null==e?void 0:e.libp2p)||void 0===t?void 0:t.config),(null==e?void 0:e.pubSubTopic)&&(s.config.pubsub=Object.assign({pubSubTopic:e.pubSubTopic},s.config.pubsub)),s.modules=Object.assign({},null===(o=null==e?void 0:e.libp2p)||void 0===o?void 0:o.modules),s.modules=Object.assign({transport:[c.default]},null===(r=null==e?void 0:e.libp2p)||void 0===r?void 0:r.modules),s.modules=Object.assign(s.modules,{streamMuxer:[u.default],connEncryption:[new i.Noise(null==e?void 0:e.staticNoiseKey)],pubsub:m.WakuRelay}),null==e?void 0:e.bootstrap){let t;if(!0===e.bootstrap?t=g.getBootstrapNodes:Array.isArray(e.bootstrap)?t=()=>e.bootstrap:"function"==typeof e.bootstrap&&(t=e.bootstrap),void 0!==t)try{const e=await t();s.modules=Object.assign(s.modules,{peerDiscovery:[a.default]}),s.config.peerDiscovery={[a.default.tag]:{list:e,enabled:!0}}}catch(e){T("Failed to retrieve bootstrap nodes",e)}}const d=await n.default.create(s),p=new P.WakuStore(d,{pubSubTopic:null==e?void 0:e.pubSubTopic}),f=new b.WakuLightPush(d);return await d.start(),new R(e||{},d,p,f)}async dial(e){return this.libp2p.dialProtocol(e,[P.StoreCodec].concat(m.RelayCodecs))}addPeerToAddressBook(e,t){let o;o="string"==typeof e?f.default.createFromB58String(e):e;const r=t.map((e=>"string"==typeof e?p.multiaddr(e):e));this.libp2p.peerStore.addressBook.set(o,r)}async stop(){return this.libp2p.stop()}addDecryptionKey(e){this.relay.addDecryptionKey(e),this.store.addDecryptionKey(e)}deleteDecryptionKey(e){this.relay.deleteDecryptionKey(e),this.store.deleteDecryptionKey(e)}getLocalMultiaddrWithID(){const e=this.libp2p.multiaddrs.find((e=>e.toString().match(/127\.0\.0\.1/)));if(!e||""===e.toString())throw"Not listening on localhost";return e+"/p2p/"+this.libp2p.peerId.toB58String()}async waitForConnectedPeer(){const e=[[P.StoreCodec],[b.LightPushCodec],m.RelayCodecs];await Promise.all(e.map((e=>{const t=new Array;return e.forEach((e=>{h.getPeersForProtocol(this.libp2p,e).forEach((e=>t.push(e)))})),t.length>0?Promise.resolve():new Promise((t=>{this.libp2p.peerStore.on("change:protocols",(({protocols:o})=>{e.forEach((e=>{o.includes(e)&&(T("Resolving for",e,o),t())}))}))}))})))}startKeepAlive(e,t,o){this.stopKeepAlive(e);const r=e.toB58String();0!==t&&(this.pingKeepAliveTimers[r]=setInterval((()=>{d.default(this.libp2p,e)}),1e3*t)),0!==o&&(this.relayKeepAliveTimers[r]=setInterval((()=>{y.WakuMessage.fromBytes(new Uint8Array,v.RelayPingContentTopic).then((e=>this.relay.send(e)))}),1e3*o))}stopKeepAlive(e){const t=e.toB58String();this.pingKeepAliveTimers[t]&&(clearInterval(this.pingKeepAliveTimers[t]),delete this.pingKeepAliveTimers[t]),this.relayKeepAliveTimers[t]&&(clearInterval(this.relayKeepAliveTimers[t]),delete this.relayKeepAliveTimers[t])}}t.Waku=R},17087:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuLightPush=t.PushResponse=t.LightPushCodec=void 0;const i=r(o(88342)),s=r(o(48963)),n=r(o(60618)),a=o(67405);Object.defineProperty(t,"PushResponse",{enumerable:!0,get:function(){return a.PushResponse}});const u=o(65187),c=o(90607),l=o(67140);t.LightPushCodec="/vac/waku/lightpush/2.0.0-beta1",t.WakuLightPush=class{constructor(e,t){this.libp2p=e,(null==t?void 0:t.pubSubTopic)?this.pubSubTopic=t.pubSubTopic:this.pubSubTopic=c.DefaultPubSubTopic}async push(e,o){let r;if(null==o?void 0:o.peerId){if(r=this.libp2p.peerStore.get(o.peerId),!r)throw"Peer is unknown"}else r=this.randomPeer;if(!r)throw"No peer available";if(!r.protocols.includes(t.LightPushCodec))throw"Peer does not register waku light push protocol";const a=this.libp2p.connectionManager.get(r.id);if(!a)throw"Failed to get a connection to the peer";const{stream:u}=await a.newStream(t.LightPushCodec);try{const t=(null==o?void 0:o.pubSubTopic)?o.pubSubTopic:this.pubSubTopic,r=l.PushRPC.createRequest(e,t),a=await n.default([r.encode()],s.default.encode(),u,s.default.decode(),i.default);try{return l.PushRPC.decode(a.slice()).response||(console.log("No response in PushRPC"),null)}catch(e){console.log("Failed to decode push reply",e)}}catch(e){console.log("Failed to send waku light push request",e)}return null}get peers(){return u.getPeersForProtocol(this.libp2p,t.LightPushCodec)}get randomPeer(){return u.selectRandomPeer(this.peers)}}},67140:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PushRPC=void 0;const n=o(62100),a=o(21614),u=s(o(67405));class c{constructor(e){this.proto=e}static createRequest(e,t){return new c({requestId:a.v4(),request:{message:e.proto,pubSubTopic:t},response:void 0})}static decode(e){const t=u.PushRPC.decode(n.Reader.create(e));return new c(t)}encode(){return u.PushRPC.encode(this.proto).finish()}get query(){return this.proto.request}get response(){return this.proto.response}}t.PushRPC=c},92560:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuMessage=void 0;const a=o(48764),u=n(o(11227)),c=o(62100),l=s(o(66561)),d=s(o(48340)),p=u.default("waku:message");class f{constructor(e,t,o){this.proto=e,this._signaturePublicKey=t,this._signature=o}static async fromUtf8String(e,t,o){const r=a.Buffer.from(e,"utf-8");return f.fromBytes(r,t,o)}static async fromBytes(e,t,o){const{timestamp:r,encPublicKey:i,symKey:s,sigPrivKey:n}=Object.assign({timestamp:new Date},o||{});let a,u=e,c=0;if(i&&s)throw"Pass either `encPublicKey` or `symKey`, not both.";if(i){const e=d.clearEncode(u,n);u=await d.encryptAsymmetric(e.payload,i),a=e.sig,c=1}else if(s){const e=d.clearEncode(u,n);u=await d.encryptSymmetric(e.payload,s),a=e.sig,c=1}return new f({payload:u,timestamp:r.valueOf()/1e3,version:c,contentTopic:t},null==a?void 0:a.publicKey,null==a?void 0:a.signature)}static async decode(e,t){const o=l.WakuMessage.decode(c.Reader.create(e));return f.decodeProto(o,t)}static async decodeProto(e,t){var o,r;if(void 0===e.payload)return void p("Payload is undefined");const i=e.payload;let s,n;if(1===e.version&&e.payload){if(void 0===t)return void p("Payload is encrypted but no private keys have been provided.");const a=e=>!!e,u=(await Promise.all(t.map((async e=>{try{return await d.decryptSymmetric(i,e)}catch(t){p("Failed to decrypt message using symmetric encryption",t);try{return await d.decryptAsymmetric(i,e)}catch(e){return void p("Failed to decrypt message using asymmetric encryption",e)}}})))).filter(a);if(0===u.length)return void p("Failed to decrypt payload.");const c=u[0],l=await d.clearDecode(c);if(!l)return void p("Failed to decode payload.");Object.assign(e,{payload:l.payload}),s=null===(o=l.sig)||void 0===o?void 0:o.publicKey,n=null===(r=l.sig)||void 0===r?void 0:r.signature}return new f(e,s,n)}encode(){return l.WakuMessage.encode(this.proto).finish()}get payloadAsUtf8(){return this.proto.payload?a.Buffer.from(this.proto.payload).toString("utf-8"):""}get payload(){return this.proto.payload}get contentTopic(){return this.proto.contentTopic}get version(){return this.proto.version}get timestamp(){if(this.proto.timestamp)return new Date(1e3*this.proto.timestamp)}get signaturePublicKey(){return this._signaturePublicKey}get signature(){return this._signature}}t.WakuMessage=f},48615:(e,t,o)=>{"use strict";var r=o(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.generateIv=t.decrypt=t.encrypt=void 0;const i=o(16104),s=window.crypto||window.msCrypto,n=s.subtle||s.webkitSubtle,a={name:"AES-GCM",length:128};if(void 0===n)throw new Error("Failed to load Subtle CryptoAPI");t.encrypt=async function(e,t,o){return n.importKey("raw",t,a,!1,["encrypt"]).then((t=>n.encrypt(Object.assign({iv:e},a),t,o))).then(r.from)},t.decrypt=async function(e,t,o){return n.importKey("raw",t,a,!1,["decrypt"]).then((t=>n.decrypt(Object.assign({iv:e},a),t,o))).then(r.from)},t.generateIv=function(){const e=new Uint8Array(i.IvSize);return s.getRandomValues(e),e}},16104:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.symmetric=t.TagSize=t.IvSize=t.SymmetricKeySize=void 0,t.SymmetricKeySize=32,t.IvSize=12,t.TagSize=16,t.symmetric={},Promise.resolve().then((()=>s(o(48615)))).then((e=>{t.symmetric=e})).catch((e=>{Promise.resolve().then((()=>s(o(70194)))).then((e=>{t.symmetric=e})).catch((t=>{throw`Could not load any symmetric crypto modules: ${e}, ${t}`}))}))},70194:(e,t,o)=>{"use strict";var r=o(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.generateIv=t.decrypt=t.encrypt=void 0;const i=o(55835),s=o(16104),n="aes-256-gcm";t.encrypt=async function(e,t,o){const s=i.createCipheriv(n,t,e),a=s.update(o),u=s.final(),c=s.getAuthTag();return r.concat([a,u,c])},t.decrypt=async function(e,t,o){const a=o.length-s.TagSize,u=o.slice(0,a),c=o.slice(a),l=i.createDecipheriv(n,t,e);l.setAuthTag(c);const d=l.update(u),p=l.final();return r.concat([d,p])},t.generateIv=function(){return i.randomBytes(s.IvSize)}},48340:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.getPublicKey=t.generateSymmetricKey=t.generatePrivateKey=t.decryptSymmetric=t.encryptSymmetric=t.decryptAsymmetric=t.encryptAsymmetric=t.clearDecode=t.clearEncode=t.PrivateKeySize=void 0;const n=o(48764),a=s(o(55835)),u=s(o(63611)),c=o(91094),l=s(o(17221)),d=o(61721),p=o(16104);function f(e){return l.publicKeyCreate(e,!1)}function g(e){let t=1;for(let o=e.length;o>=256;o/=256)t++;return t}function h(e){if("undefined"!=typeof window&&window&&window.crypto){const t=new Uint8Array(e);return window.crypto.getRandomValues(t),t}return a.randomBytes(e)}t.PrivateKeySize=32,t.clearEncode=function(e,t){let o=n.Buffer.from([0]);o=function(e,t){const o=g(t);let r=n.Buffer.alloc(4);return r.writeUInt32LE(t.length,0),r=r.slice(0,o),(e=n.Buffer.concat([e,r]))[0]|=o,e}(o,e),o=n.Buffer.concat([o,n.Buffer.from(e)]);let r=1+g(e)+e.length;t&&(r+=65);const i=256-r%256,s=n.Buffer.from(h(i));if(u=i,(a=s).length!==u||u>3&&n.Buffer.from(a).equals(n.Buffer.alloc(a.length)))throw new Error("failed to generate random padding of size "+i);var a,u;let p;if(o=n.Buffer.concat([o,s]),t){o[0]|=4;const e=c.keccak256(o),r=l.ecdsaSign(d.hexToBuf(e),t);o=n.Buffer.concat([o,r.signature,n.Buffer.from([r.recid])]),p={signature:n.Buffer.from(r.signature),publicKey:f(t)}}return{payload:o,sig:p}},t.clearDecode=function(e){const t=n.Buffer.from(e);let o,r=1;const i=3&t.readUIntLE(0,1);if(0===i)return;const s=t.readUIntLE(r,i);r+=i;const a=t.slice(r,r+s),u=4==(4&t.readUIntLE(0,1));if(u){const e=function(e){return e.slice(e.length-65,e.length)}(t),r=function(e,t){return t?c.keccak256(e.slice(0,e.length-65)):c.keccak256(e)}(t,u),i=function(e,t){const o=t.slice(64).readIntBE(0,1);return l.ecdsaRecover(t.slice(0,64),o,d.hexToBuf(e),!1)}(r,e);o={signature:e,publicKey:i}}return{payload:a,sig:o}},t.encryptAsymmetric=async function(e,t){return u.encrypt(d.hexToBuf(t),n.Buffer.from(e))},t.decryptAsymmetric=async function(e,t){return u.decrypt(n.Buffer.from(t),n.Buffer.from(e))},t.encryptSymmetric=async function(e,t){const o=p.symmetric.generateIv(),r=await p.symmetric.encrypt(o,d.hexToBuf(t),n.Buffer.from(e));return n.Buffer.concat([r,n.Buffer.from(o)])},t.decryptSymmetric=async function(e,t){const o=n.Buffer.from(e),r=o.length-p.IvSize,i=o.slice(0,r),s=o.slice(r);return p.symmetric.decrypt(s,d.hexToBuf(t),i)},t.generatePrivateKey=function(){return h(t.PrivateKeySize)},t.generateSymmetricKey=function(){return h(p.SymmetricKeySize)},t.getPublicKey=f},99123:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RelayMaxIHaveLength=t.RelayOpportunisticGraftPeers=t.RelayOpportunisticGraftTicks=t.RelayFanoutTTL=t.RelayPruneBackoff=t.RelayPrunePeers=t.RelayHeartbeatInterval=t.RelayHeartbeatInitialDelay=t.RelayGossipFactor=t.RelayPingContentTopic=t.RelayCodecs=t.minute=t.second=void 0,t.second=1e3,t.minute=60*t.second,t.RelayCodecs=["/vac/waku/relay/2.0.0-beta2","/vac/waku/relay/2.0.0"],t.RelayPingContentTopic="/relay-ping/1/ping/null",t.RelayGossipFactor=.25,t.RelayHeartbeatInitialDelay=100,t.RelayHeartbeatInterval=t.second,t.RelayPrunePeers=16,t.RelayPruneBackoff=t.minute,t.RelayFanoutTTL=t.minute,t.RelayOpportunisticGraftTicks=60,t.RelayOpportunisticGraftPeers=2,t.RelayMaxIHaveLength=5e3},26624:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRelayPeers=void 0;const r=o(60663),i=o(22979);t.getRelayPeers=function(e,t,o,s=(()=>!0)){const n=e.topics.get(t);if(!n)return new Set;let a=[];return n.forEach((t=>{const o=e.peers.get(t);o&&i.RelayCodecs.includes(o.protocol)&&s(t)&&a.push(t)})),a=r.shuffle(a),o>0&&a.length>o&&(a=a.slice(0,o)),new Set(a)}},22979:function(e,t,o){"use strict";var r=o(48764).Buffer,i=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&i(t,e,o);return s(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuRelay=t.RelayCodecs=void 0;const u=a(o(11227)),c=a(o(95391)),l=o(60663),d=o(32185),p=a(o(88785)),f=o(61721),g=o(90607),h=o(92560),b=n(o(99123)),y=o(99123);Object.defineProperty(t,"RelayCodecs",{enumerable:!0,get:function(){return y.RelayCodecs}});const m=o(26624),v=o(65714),P=u.default("waku:relay");class S extends c.default{constructor(e,t){super(e,Object.assign(t,{globalSignaturePolicy:d.SignaturePolicy.StrictNoSign})),this.heartbeat=new v.RelayHeartbeat(this),this.observers={},this.decryptionKeys=new Set;const o=b.RelayCodecs;Object.assign(this,{multicodecs:o}),this.pubSubTopic=(null==t?void 0:t.pubSubTopic)||g.DefaultPubSubTopic}start(){super.start(),this.subscribe(this.pubSubTopic)}async send(e){const t=e.encode();await super.publish(this.pubSubTopic,r.from(t))}addDecryptionKey(e){this.decryptionKeys.add(f.hexToBuf(e))}deleteDecryptionKey(e){this.decryptionKeys.delete(f.hexToBuf(e))}addObserver(e,t=[]){0===t.length?(this.observers[""]||(this.observers[""]=new Set),this.observers[""].add(e)):t.forEach((t=>{this.observers[t]||(this.observers[t]=new Set),this.observers[t].add(e)}))}deleteObserver(e,t=[]){0===t.length?this.observers[""]&&this.observers[""].delete(e):t.forEach((t=>{this.observers[t]&&this.observers[t].delete(e)}))}getPeers(){return m.getRelayPeers(this,this.pubSubTopic,this._options.D,(e=>this.score.score(e)>=this._options.scoreThresholds.publishThreshold))}subscribe(e){this.on(e,(t=>{P(`Message received on ${e}`),h.WakuMessage.decode(t.data,Array.from(this.decryptionKeys)).then((e=>{e?(this.observers[""]&&this.observers[""].forEach((t=>{t(e)})),e.contentTopic&&this.observers[e.contentTopic]&&this.observers[e.contentTopic].forEach((t=>{t(e)}))):P("Failed to decode Waku Message")})).catch((e=>{P("Failed to decode Waku Message",e)}))})),super.subscribe(e)}join(e){var t;if(!this.started)throw new Error("WakuRelayPubSub has not started");const o=this.fanout.get(e);if(o)o.forEach((e=>{this.score.score(e)<0&&o.delete(e)})),o.size<this._options.D&&m.getRelayPeers(this,e,this._options.D-o.size,(e=>!o.has(e)&&!this.direct.has(e)&&this.score.score(e)>=0)).forEach((e=>o.add(e))),this.mesh.set(e,o),this.fanout.delete(e),this.lastpub.delete(e);else{const t=m.getRelayPeers(this,e,this._options.D,(e=>!this.direct.has(e)&&this.score.score(e)>=0));this.mesh.set(e,t)}null===(t=this.mesh.get(e))||void 0===t||t.forEach((t=>{this.log("JOIN: Add mesh link to %s in %s",t,e),this._sendGraft(t,e)}))}async _publish(e){e.receivedFrom!==this.peerId.toB58String()&&(this.score.deliverMessage(e),this.gossipTracer.deliverMessage(e));const t=await this.getMsgId(e),o=l.messageIdToString(t);this.seenCache.put(o),this.messageCache.put(e);const r=new Set;e.topicIDs.forEach((e=>{if(!this.topics.get(e))return;this.direct.forEach((e=>{r.add(e)}));let t=this.mesh.get(e);if(!t||!t.size){if(t=this.fanout.get(e),!t){const o=m.getRelayPeers(this,e,this._options.D,(e=>this.score.score(e)>=this._options.scoreThresholds.publishThreshold));o.size>0?(t=o,this.fanout.set(e,o)):t=new Set}this.lastpub.set(e,this._now())}null==t||t.forEach((e=>{r.add(e)}))}));const i=l.createGossipRpc([c.default.utils.normalizeOutRpcMessage(e)]);r.forEach((t=>{t!==e.from&&this._sendRpc(t,i)}))}_emitGossip(e,t){const o=this.messageCache.getGossipIDs(e);if(!o.length)return;l.shuffle(o),o.length>b.RelayMaxIHaveLength&&this.log("too many messages for gossip; will truncate IHAVE list (%d messages)",o.length);const r=[],i=this.topics.get(e);if(!i)return;i.forEach((e=>{const o=this.peers.get(e);o&&!t.has(e)&&!this.direct.has(e)&&b.RelayCodecs.includes(o.protocol)&&this.score.score(e)>=this._options.scoreThresholds.gossipThreshold&&r.push(e)}));let s=this._options.Dlazy;const n=b.RelayGossipFactor*r.length;n>s&&(s=n),s>r.length?s=r.length:l.shuffle(r),r.slice(0,s).forEach((t=>{let r=o;o.length>b.RelayMaxIHaveLength&&(r=l.shuffle(r.slice()).slice(0,b.RelayMaxIHaveLength)),this._pushGossip(t,{topicID:e,messageIDs:r})}))}_makePrune(e,t,o){const r=b.RelayPruneBackoff/1e3,i=[];return o&&m.getRelayPeers(this,t,b.RelayPrunePeers,(t=>t!==e&&this.score.score(t)>=0)).forEach((e=>{const t=p.default.createFromB58String(e);i.push({peerID:t.toBytes(),signedPeerRecord:this._libp2p.peerStore.addressBook.getRawEnvelope(t)})})),{topicID:t,peers:i,backoff:r}}}t.WakuRelay=S},65714:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.RelayHeartbeat=void 0;const n=o(91259),a=o(60663),u=s(o(99123)),c=o(26624);class l extends n.Heartbeat{constructor(e){super(e)}start(){if(this._heartbeatTimer)return;const e=this._heartbeat.bind(this),t=setTimeout((()=>{var t;e(),null===(t=this._heartbeatTimer)||void 0===t||t.runPeriodically(e,u.RelayHeartbeatInterval)}),u.RelayHeartbeatInitialDelay);this._heartbeatTimer={_intervalId:void 0,runPeriodically:(e,t)=>{this._heartbeatTimer._intervalId=setInterval(e,t)},cancel:()=>{var e;clearTimeout(t),clearInterval(null===(e=this._heartbeatTimer)||void 0===e?void 0:e._intervalId)}}}stop(){this._heartbeatTimer&&(this._heartbeatTimer.cancel(),this._heartbeatTimer=null)}_heartbeat(){const{D:e,Dlo:t,Dhi:o,Dscore:r,Dout:i}=this.gossipsub._options;this.gossipsub.heartbeatTicks++;const s=new Map,n=e=>{let t=s.get(e);return void 0===t&&(t=this.gossipsub.score.score(e),s.set(e,t)),t},l=new Map,d=new Map,p=new Map;this.gossipsub._clearBackoff(),this.gossipsub.peerhave.clear(),this.gossipsub.iasked.clear(),this.gossipsub._applyIwantPenalties(),this.gossipsub._directConnect(),this.gossipsub.mesh.forEach(((s,f)=>{const g=e=>{this.gossipsub.log("HEARTBEAT: Remove mesh link to %s in %s",e,f),this.gossipsub.score.prune(e,f),this.gossipsub._addBackoff(e,f),s.delete(e);const t=d.get(e);t?t.push(f):d.set(e,[f])},h=e=>{this.gossipsub.log("HEARTBEAT: Add mesh link to %s in %s",e,f),this.gossipsub.score.graft(e,f),s.add(e);const t=l.get(e);t?t.push(f):l.set(e,[f])};if(s.forEach((e=>{const t=n(e);t<0&&(this.gossipsub.log("HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s",e,t,f),g(e),p.set(e,!0))})),s.size<t){const t=this.gossipsub.backoff.get(f),o=e-s.size;c.getRelayPeers(this.gossipsub,f,o,(e=>!s.has(e)&&!this.gossipsub.direct.has(e)&&(!t||!t.has(e))&&n(e)>=0)).forEach(h)}if(s.size>o){let t=Array.from(s);t.sort(((e,t)=>n(t)-n(e))),t=t.slice(0,r).concat(a.shuffle(t.slice(r)));let o=0;if(t.slice(0,e).forEach((e=>{this.gossipsub.outbound.get(e)&&o++})),o<i){const r=e=>{const o=t[e];for(let o=e;o>0;o--)t[o]=t[o-1];t[0]=o};if(o>0){let i=o;for(let o=1;o<e&&i>0;o++)this.gossipsub.outbound.get(t[o])&&(r(o),i--)}let i=e-o;for(let o=e;o<t.length&&i>0;o++)this.gossipsub.outbound.get(t[o])&&(r(o),i--)}t.slice(e).forEach(g)}if(s.size>=t){let e=0;if(s.forEach((t=>{this.gossipsub.outbound.get(t)&&e++})),e<i){const t=i-e,o=this.gossipsub.backoff.get(f);c.getRelayPeers(this.gossipsub,f,t,(e=>!s.has(e)&&!this.gossipsub.direct.has(e)&&(!o||!o.has(e))&&n(e)>=0)).forEach(h)}}if(this.gossipsub.heartbeatTicks%u.RelayOpportunisticGraftTicks==0&&s.size>1){const e=Array.from(s).sort(((e,t)=>n(e)-n(t))),t=Math.floor(s.size/2),o=n(e[t]);if(o<this.gossipsub._options.scoreThresholds.opportunisticGraftThreshold){const e=this.gossipsub.backoff.get(f);c.getRelayPeers(this.gossipsub,f,u.RelayOpportunisticGraftPeers,(t=>s.has(t)&&!this.gossipsub.direct.has(t)&&(!e||!e.has(t))&&n(t)>o)).forEach((e=>{this.gossipsub.log("HEARTBEAT: Opportunistically graft peer %s on topic %s",e,f),h(e)}))}}this.gossipsub._emitGossip(f,s)}));const f=this.gossipsub._now();this.gossipsub.lastpub.forEach(((e,t)=>{e+u.RelayFanoutTTL<f&&(this.gossipsub.fanout.delete(t),this.gossipsub.lastpub.delete(t))})),this.gossipsub.fanout.forEach(((t,o)=>{const r=this.gossipsub.topics.get(o);if(t.forEach((e=>{(!(null==r?void 0:r.has(e))||n(e)<this.gossipsub._options.scoreThresholds.publishThreshold)&&t.delete(e)})),t.size<e){const r=e-t.size;c.getRelayPeers(this.gossipsub,o,r,(e=>!t.has(e)&&!this.gossipsub.direct.has(e)&&n(e)>=this.gossipsub._options.scoreThresholds.publishThreshold)).forEach((e=>{t.add(e)}))}this.gossipsub._emitGossip(o,t)})),this.gossipsub._sendGraftPrune(l,d,p),this.gossipsub._flush(),this.gossipsub.messageCache.shift(),this.gossipsub.emit("gossipsub:heartbeat")}}t.RelayHeartbeat=l},77545:function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&r(t,e,o);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.PageDirection=void 0;const n=o(62100),a=o(21614),u=s(o(25336));var c;!function(e){e.BACKWARD="backward",e.FORWARD="forward"}(c=t.PageDirection||(t.PageDirection={}));class l{constructor(e){this.proto=e}static createQuery(e){const t=function(e){switch(e){case c.BACKWARD:return u.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;case c.FORWARD:return u.PagingInfo_Direction.DIRECTION_FORWARD;default:return u.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED}}(e.pageDirection),o={pageSize:e.pageSize,cursor:e.cursor,direction:t},r=e.contentTopics.map((e=>({contentTopic:e})));return new l({requestId:a.v4(),query:{pubSubTopic:e.pubSubTopic,contentFilters:r,pagingInfo:o,startTime:e.startTime,endTime:e.endTime},response:void 0})}static decode(e){const t=u.HistoryRPC.decode(n.Reader.create(e));return new l(t)}encode(){return u.HistoryRPC.encode(this.proto).finish()}get query(){return this.proto.query}get response(){return this.proto.response}}t.HistoryRPC=l},95960:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuStore=t.PageDirection=t.DefaultPageSize=t.StoreCodec=void 0;const i=r(o(11227)),s=r(o(88342)),n=r(o(48963)),a=r(o(60618)),u=o(25336),c=o(65187),l=o(61721),d=o(90607),p=o(92560),f=o(77545);Object.defineProperty(t,"PageDirection",{enumerable:!0,get:function(){return f.PageDirection}});const g=i.default("waku:store");t.StoreCodec="/vac/waku/store/2.0.0-beta3",t.DefaultPageSize=10,t.WakuStore=class{constructor(e,t){this.libp2p=e,(null==t?void 0:t.pubSubTopic)?this.pubSubTopic=t.pubSubTopic:this.pubSubTopic=d.DefaultPubSubTopic,this.decryptionKeys=new Set}async queryHistory(e,o){var r,i,c,d;let h,b;(null==o?void 0:o.timeFilter)&&(h=o.timeFilter.startTime.getTime()/1e3,b=o.timeFilter.endTime.getTime()/1e3);const y=Object.assign({pubSubTopic:this.pubSubTopic,pageDirection:f.PageDirection.BACKWARD,pageSize:t.DefaultPageSize},o,{startTime:h,endTime:b},{contentTopics:e});let m;if(g("Querying history with the following options",o),y.peerId){if(m=this.libp2p.peerStore.get(y.peerId),!m)throw`Failed to retrieve connection details for provided peer in peer store: ${y.peerId.toB58String()}`}else if(m=this.randomPeer,!m)throw"Failed to find known peer that registers waku store protocol";if(!m.protocols.includes(t.StoreCodec))throw`Peer does not register waku store protocol: ${m.id.toB58String()}`;const v=this.libp2p.connectionManager.get(m.id);if(!v)throw"Failed to get a connection to the peer";const P=Array.from(this.decryptionKeys.values());y.decryptionKeys&&y.decryptionKeys.forEach((e=>{P.push(l.hexToBuf(e))}));const S=[];let T;for(;;){const{stream:e}=await v.newStream(t.StoreCodec),o=Object.assign(y,{cursor:T}),l=f.HistoryRPC.createQuery(o);g("Querying store peer",v.remoteAddr.toString());const h=await a.default([l.encode()],n.default.encode(),e,n.default.decode(),s.default),b=f.HistoryRPC.decode(h.slice()).response;if(!b)throw"History response misses response field";if(b.error&&b.error===u.HistoryResponse_Error.ERROR_INVALID_CURSOR)throw"History response contains an Error: INVALID CURSOR";if(!b.messages||!b.messages.length)return console.log("No messages present in HistoryRPC response"),S;g(`${b.messages.length} messages retrieved for pubsub topic ${y.pubSubTopic}`);const m=[];await Promise.all(b.messages.map((async e=>{const t=await p.WakuMessage.decodeProto(e,P);t&&(S.push(t),m.push(t))})));let R=!1;y.callback&&(R=Boolean(y.callback(m)));const O=null===(r=b.pagingInfo)||void 0===r?void 0:r.pageSize,_=null===(c=null===(i=l.query)||void 0===i?void 0:i.pagingInfo)||void 0===c?void 0:c.pageSize;if(R||O&&_&&O<_)return S;if(T=null===(d=b.pagingInfo)||void 0===d?void 0:d.cursor,void 0===T)return console.log("No cursor returned by peer."),S}}addDecryptionKey(e){this.decryptionKeys.add(l.hexToBuf(e))}deleteDecryptionKey(e){this.decryptionKeys.delete(l.hexToBuf(e))}get peers(){return c.getPeersForProtocol(this.libp2p,t.StoreCodec)}get randomPeer(){return c.selectRandomPeer(this.peers)}}},15888:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.HistoryResponse=t.HistoryQuery=t.ContentFilter=t.PagingInfo_Direction=t.PagingInfo=t.Index=t.WakuMessage=void 0;var r=o(66561);Object.defineProperty(t,"WakuMessage",{enumerable:!0,get:function(){return r.WakuMessage}});var i=o(25336);Object.defineProperty(t,"Index",{enumerable:!0,get:function(){return i.Index}}),Object.defineProperty(t,"PagingInfo",{enumerable:!0,get:function(){return i.PagingInfo}}),Object.defineProperty(t,"PagingInfo_Direction",{enumerable:!0,get:function(){return i.PagingInfo_Direction}}),Object.defineProperty(t,"ContentFilter",{enumerable:!0,get:function(){return i.ContentFilter}}),Object.defineProperty(t,"HistoryQuery",{enumerable:!0,get:function(){return i.HistoryQuery}}),Object.defineProperty(t,"HistoryResponse",{enumerable:!0,get:function(){return i.HistoryResponse}}),Object.defineProperty(t,"HistoryRPC",{enumerable:!0,get:function(){return i.HistoryRPC}})},67405:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PushRPC=t.PushResponse=t.PushRequest=t.protobufPackage=void 0;const i=r(o(43720)),s=r(o(62100)),n=o(66561);t.protobufPackage="waku.v2";const a={pubSubTopic:""};t.PushRequest={encode:(e,t=s.default.Writer.create())=>(""!==e.pubSubTopic&&t.uint32(10).string(e.pubSubTopic),void 0!==e.message&&n.WakuMessage.encode(e.message,t.uint32(18).fork()).ldelim(),t),decode(e,t){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let r=void 0===t?o.len:o.pos+t;const i=Object.assign({},a);for(;o.pos<r;){const e=o.uint32();switch(e>>>3){case 1:i.pubSubTopic=o.string();break;case 2:i.message=n.WakuMessage.decode(o,o.uint32());break;default:o.skipType(7&e)}}return i},fromJSON(e){const t=Object.assign({},a);return void 0!==e.pubSubTopic&&null!==e.pubSubTopic?t.pubSubTopic=String(e.pubSubTopic):t.pubSubTopic="",void 0!==e.message&&null!==e.message?t.message=n.WakuMessage.fromJSON(e.message):t.message=void 0,t},toJSON(e){const t={};return void 0!==e.pubSubTopic&&(t.pubSubTopic=e.pubSubTopic),void 0!==e.message&&(t.message=e.message?n.WakuMessage.toJSON(e.message):void 0),t},fromPartial(e){const t=Object.assign({},a);return void 0!==e.pubSubTopic&&null!==e.pubSubTopic?t.pubSubTopic=e.pubSubTopic:t.pubSubTopic="",void 0!==e.message&&null!==e.message?t.message=n.WakuMessage.fromPartial(e.message):t.message=void 0,t}};const u={isSuccess:!1,info:""};t.PushResponse={encode:(e,t=s.default.Writer.create())=>(!0===e.isSuccess&&t.uint32(8).bool(e.isSuccess),""!==e.info&&t.uint32(18).string(e.info),t),decode(e,t){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let r=void 0===t?o.len:o.pos+t;const i=Object.assign({},u);for(;o.pos<r;){const e=o.uint32();switch(e>>>3){case 1:i.isSuccess=o.bool();break;case 2:i.info=o.string();break;default:o.skipType(7&e)}}return i},fromJSON(e){const t=Object.assign({},u);return void 0!==e.isSuccess&&null!==e.isSuccess?t.isSuccess=Boolean(e.isSuccess):t.isSuccess=!1,void 0!==e.info&&null!==e.info?t.info=String(e.info):t.info="",t},toJSON(e){const t={};return void 0!==e.isSuccess&&(t.isSuccess=e.isSuccess),void 0!==e.info&&(t.info=e.info),t},fromPartial(e){const t=Object.assign({},u);return void 0!==e.isSuccess&&null!==e.isSuccess?t.isSuccess=e.isSuccess:t.isSuccess=!1,void 0!==e.info&&null!==e.info?t.info=e.info:t.info="",t}};const c={requestId:""};t.PushRPC={encode:(e,o=s.default.Writer.create())=>(""!==e.requestId&&o.uint32(10).string(e.requestId),void 0!==e.request&&t.PushRequest.encode(e.request,o.uint32(18).fork()).ldelim(),void 0!==e.response&&t.PushResponse.encode(e.response,o.uint32(26).fork()).ldelim(),o),decode(e,o){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===o?r.len:r.pos+o;const n=Object.assign({},c);for(;r.pos<i;){const e=r.uint32();switch(e>>>3){case 1:n.requestId=r.string();break;case 2:n.request=t.PushRequest.decode(r,r.uint32());break;case 3:n.response=t.PushResponse.decode(r,r.uint32());break;default:r.skipType(7&e)}}return n},fromJSON(e){const o=Object.assign({},c);return void 0!==e.requestId&&null!==e.requestId?o.requestId=String(e.requestId):o.requestId="",void 0!==e.request&&null!==e.request?o.request=t.PushRequest.fromJSON(e.request):o.request=void 0,void 0!==e.response&&null!==e.response?o.response=t.PushResponse.fromJSON(e.response):o.response=void 0,o},toJSON(e){const o={};return void 0!==e.requestId&&(o.requestId=e.requestId),void 0!==e.request&&(o.request=e.request?t.PushRequest.toJSON(e.request):void 0),void 0!==e.response&&(o.response=e.response?t.PushResponse.toJSON(e.response):void 0),o},fromPartial(e){const o=Object.assign({},c);return void 0!==e.requestId&&null!==e.requestId?o.requestId=e.requestId:o.requestId="",void 0!==e.request&&null!==e.request?o.request=t.PushRequest.fromPartial(e.request):o.request=void 0,void 0!==e.response&&null!==e.response?o.response=t.PushResponse.fromPartial(e.response):o.response=void 0,o}},s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},66561:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuMessage=t.protobufPackage=void 0;const i=r(o(43720)),s=r(o(62100));t.protobufPackage="waku.v2";const n={};t.WakuMessage={encode:(e,t=s.default.Writer.create())=>(void 0!==e.payload&&t.uint32(10).bytes(e.payload),void 0!==e.contentTopic&&t.uint32(18).string(e.contentTopic),void 0!==e.version&&t.uint32(24).uint32(e.version),void 0!==e.timestamp&&t.uint32(33).double(e.timestamp),t),decode(e,t){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let r=void 0===t?o.len:o.pos+t;const i=Object.assign({},n);for(;o.pos<r;){const e=o.uint32();switch(e>>>3){case 1:i.payload=o.bytes();break;case 2:i.contentTopic=o.string();break;case 3:i.version=o.uint32();break;case 4:i.timestamp=o.double();break;default:o.skipType(7&e)}}return i},fromJSON(e){const t=Object.assign({},n);return void 0!==e.payload&&null!==e.payload&&(t.payload=function(e){const t=u(e),o=new Uint8Array(t.length);for(let e=0;e<t.length;++e)o[e]=t.charCodeAt(e);return o}(e.payload)),void 0!==e.contentTopic&&null!==e.contentTopic?t.contentTopic=String(e.contentTopic):t.contentTopic=void 0,void 0!==e.version&&null!==e.version?t.version=Number(e.version):t.version=void 0,void 0!==e.timestamp&&null!==e.timestamp?t.timestamp=Number(e.timestamp):t.timestamp=void 0,t},toJSON(e){const t={};return void 0!==e.payload&&(t.payload=void 0!==e.payload?function(e){const t=[];for(const o of e)t.push(String.fromCharCode(o));return c(t.join(""))}(e.payload):void 0),void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),void 0!==e.version&&(t.version=e.version),void 0!==e.timestamp&&(t.timestamp=e.timestamp),t},fromPartial(e){const t=Object.assign({},n);return void 0!==e.payload&&null!==e.payload?t.payload=e.payload:t.payload=void 0,void 0!==e.contentTopic&&null!==e.contentTopic?t.contentTopic=e.contentTopic:t.contentTopic=void 0,void 0!==e.version&&null!==e.version?t.version=e.version:t.version=void 0,void 0!==e.timestamp&&null!==e.timestamp?t.timestamp=e.timestamp:t.timestamp=void 0,t}};var a=(()=>{if(void 0!==a)return a;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==o.g)return o.g;throw"Unable to locate global object"})();const u=a.atob||(e=>a.Buffer.from(e,"base64").toString("binary")),c=a.btoa||(e=>a.Buffer.from(e,"binary").toString("base64"));s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},25336:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.HistoryResponse=t.HistoryQuery=t.ContentFilter=t.PagingInfo=t.Index=t.historyResponse_ErrorToJSON=t.historyResponse_ErrorFromJSON=t.HistoryResponse_Error=t.pagingInfo_DirectionToJSON=t.pagingInfo_DirectionFromJSON=t.PagingInfo_Direction=t.protobufPackage=void 0;const i=r(o(43720)),s=r(o(62100)),n=o(66561);var a,u;function c(e){switch(e){case 0:case"DIRECTION_BACKWARD_UNSPECIFIED":return a.DIRECTION_BACKWARD_UNSPECIFIED;case 1:case"DIRECTION_FORWARD":return a.DIRECTION_FORWARD;default:return a.UNRECOGNIZED}}function l(e){switch(e){case a.DIRECTION_BACKWARD_UNSPECIFIED:return"DIRECTION_BACKWARD_UNSPECIFIED";case a.DIRECTION_FORWARD:return"DIRECTION_FORWARD";default:return"UNKNOWN"}}function d(e){switch(e){case 0:case"ERROR_NONE_UNSPECIFIED":return u.ERROR_NONE_UNSPECIFIED;case 1:case"ERROR_INVALID_CURSOR":return u.ERROR_INVALID_CURSOR;default:return u.UNRECOGNIZED}}function p(e){switch(e){case u.ERROR_NONE_UNSPECIFIED:return"ERROR_NONE_UNSPECIFIED";case u.ERROR_INVALID_CURSOR:return"ERROR_INVALID_CURSOR";default:return"UNKNOWN"}}t.protobufPackage="waku.v2",function(e){e[e.DIRECTION_BACKWARD_UNSPECIFIED=0]="DIRECTION_BACKWARD_UNSPECIFIED",e[e.DIRECTION_FORWARD=1]="DIRECTION_FORWARD",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(a=t.PagingInfo_Direction||(t.PagingInfo_Direction={})),t.pagingInfo_DirectionFromJSON=c,t.pagingInfo_DirectionToJSON=l,function(e){e[e.ERROR_NONE_UNSPECIFIED=0]="ERROR_NONE_UNSPECIFIED",e[e.ERROR_INVALID_CURSOR=1]="ERROR_INVALID_CURSOR",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(u=t.HistoryResponse_Error||(t.HistoryResponse_Error={})),t.historyResponse_ErrorFromJSON=d,t.historyResponse_ErrorToJSON=p;const f={receivedTime:0,senderTime:0};t.Index={encode:(e,t=s.default.Writer.create())=>(0!==e.digest.length&&t.uint32(10).bytes(e.digest),0!==e.receivedTime&&t.uint32(17).double(e.receivedTime),0!==e.senderTime&&t.uint32(25).double(e.senderTime),t),decode(e,t){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let r=void 0===t?o.len:o.pos+t;const i=Object.assign({},f);for(i.digest=new Uint8Array;o.pos<r;){const e=o.uint32();switch(e>>>3){case 1:i.digest=o.bytes();break;case 2:i.receivedTime=o.double();break;case 3:i.senderTime=o.double();break;default:o.skipType(7&e)}}return i},fromJSON(e){const t=Object.assign({},f);return t.digest=new Uint8Array,void 0!==e.digest&&null!==e.digest&&(t.digest=function(e){const t=P(e),o=new Uint8Array(t.length);for(let e=0;e<t.length;++e)o[e]=t.charCodeAt(e);return o}(e.digest)),void 0!==e.receivedTime&&null!==e.receivedTime?t.receivedTime=Number(e.receivedTime):t.receivedTime=0,void 0!==e.senderTime&&null!==e.senderTime?t.senderTime=Number(e.senderTime):t.senderTime=0,t},toJSON(e){const t={};return void 0!==e.digest&&(t.digest=function(e){const t=[];for(const o of e)t.push(String.fromCharCode(o));return S(t.join(""))}(void 0!==e.digest?e.digest:new Uint8Array)),void 0!==e.receivedTime&&(t.receivedTime=e.receivedTime),void 0!==e.senderTime&&(t.senderTime=e.senderTime),t},fromPartial(e){const t=Object.assign({},f);return void 0!==e.digest&&null!==e.digest?t.digest=e.digest:t.digest=new Uint8Array,void 0!==e.receivedTime&&null!==e.receivedTime?t.receivedTime=e.receivedTime:t.receivedTime=0,void 0!==e.senderTime&&null!==e.senderTime?t.senderTime=e.senderTime:t.senderTime=0,t}};const g={pageSize:0,direction:0};t.PagingInfo={encode:(e,o=s.default.Writer.create())=>(0!==e.pageSize&&o.uint32(8).uint64(e.pageSize),void 0!==e.cursor&&t.Index.encode(e.cursor,o.uint32(18).fork()).ldelim(),0!==e.direction&&o.uint32(24).int32(e.direction),o),decode(e,o){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===o?r.len:r.pos+o;const n=Object.assign({},g);for(;r.pos<i;){const e=r.uint32();switch(e>>>3){case 1:n.pageSize=T(r.uint64());break;case 2:n.cursor=t.Index.decode(r,r.uint32());break;case 3:n.direction=r.int32();break;default:r.skipType(7&e)}}return n},fromJSON(e){const o=Object.assign({},g);return void 0!==e.pageSize&&null!==e.pageSize?o.pageSize=Number(e.pageSize):o.pageSize=0,void 0!==e.cursor&&null!==e.cursor?o.cursor=t.Index.fromJSON(e.cursor):o.cursor=void 0,void 0!==e.direction&&null!==e.direction?o.direction=c(e.direction):o.direction=0,o},toJSON(e){const o={};return void 0!==e.pageSize&&(o.pageSize=e.pageSize),void 0!==e.cursor&&(o.cursor=e.cursor?t.Index.toJSON(e.cursor):void 0),void 0!==e.direction&&(o.direction=l(e.direction)),o},fromPartial(e){const o=Object.assign({},g);return void 0!==e.pageSize&&null!==e.pageSize?o.pageSize=e.pageSize:o.pageSize=0,void 0!==e.cursor&&null!==e.cursor?o.cursor=t.Index.fromPartial(e.cursor):o.cursor=void 0,void 0!==e.direction&&null!==e.direction?o.direction=e.direction:o.direction=0,o}};const h={contentTopic:""};t.ContentFilter={encode:(e,t=s.default.Writer.create())=>(""!==e.contentTopic&&t.uint32(10).string(e.contentTopic),t),decode(e,t){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let r=void 0===t?o.len:o.pos+t;const i=Object.assign({},h);for(;o.pos<r;){const e=o.uint32();e>>>3==1?i.contentTopic=o.string():o.skipType(7&e)}return i},fromJSON(e){const t=Object.assign({},h);return void 0!==e.contentTopic&&null!==e.contentTopic?t.contentTopic=String(e.contentTopic):t.contentTopic="",t},toJSON(e){const t={};return void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),t},fromPartial(e){const t=Object.assign({},h);return void 0!==e.contentTopic&&null!==e.contentTopic?t.contentTopic=e.contentTopic:t.contentTopic="",t}};const b={};t.HistoryQuery={encode(e,o=s.default.Writer.create()){void 0!==e.pubSubTopic&&o.uint32(18).string(e.pubSubTopic);for(const r of e.contentFilters)t.ContentFilter.encode(r,o.uint32(26).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,o.uint32(34).fork()).ldelim(),void 0!==e.startTime&&o.uint32(41).double(e.startTime),void 0!==e.endTime&&o.uint32(49).double(e.endTime),o},decode(e,o){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===o?r.len:r.pos+o;const n=Object.assign({},b);for(n.contentFilters=[];r.pos<i;){const e=r.uint32();switch(e>>>3){case 2:n.pubSubTopic=r.string();break;case 3:n.contentFilters.push(t.ContentFilter.decode(r,r.uint32()));break;case 4:n.pagingInfo=t.PagingInfo.decode(r,r.uint32());break;case 5:n.startTime=r.double();break;case 6:n.endTime=r.double();break;default:r.skipType(7&e)}}return n},fromJSON(e){const o=Object.assign({},b);if(o.contentFilters=[],void 0!==e.pubSubTopic&&null!==e.pubSubTopic?o.pubSubTopic=String(e.pubSubTopic):o.pubSubTopic=void 0,void 0!==e.contentFilters&&null!==e.contentFilters)for(const r of e.contentFilters)o.contentFilters.push(t.ContentFilter.fromJSON(r));return void 0!==e.pagingInfo&&null!==e.pagingInfo?o.pagingInfo=t.PagingInfo.fromJSON(e.pagingInfo):o.pagingInfo=void 0,void 0!==e.startTime&&null!==e.startTime?o.startTime=Number(e.startTime):o.startTime=void 0,void 0!==e.endTime&&null!==e.endTime?o.endTime=Number(e.endTime):o.endTime=void 0,o},toJSON(e){const o={};return void 0!==e.pubSubTopic&&(o.pubSubTopic=e.pubSubTopic),e.contentFilters?o.contentFilters=e.contentFilters.map((e=>e?t.ContentFilter.toJSON(e):void 0)):o.contentFilters=[],void 0!==e.pagingInfo&&(o.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.startTime&&(o.startTime=e.startTime),void 0!==e.endTime&&(o.endTime=e.endTime),o},fromPartial(e){const o=Object.assign({},b);if(o.contentFilters=[],void 0!==e.pubSubTopic&&null!==e.pubSubTopic?o.pubSubTopic=e.pubSubTopic:o.pubSubTopic=void 0,void 0!==e.contentFilters&&null!==e.contentFilters)for(const r of e.contentFilters)o.contentFilters.push(t.ContentFilter.fromPartial(r));return void 0!==e.pagingInfo&&null!==e.pagingInfo?o.pagingInfo=t.PagingInfo.fromPartial(e.pagingInfo):o.pagingInfo=void 0,void 0!==e.startTime&&null!==e.startTime?o.startTime=e.startTime:o.startTime=void 0,void 0!==e.endTime&&null!==e.endTime?o.endTime=e.endTime:o.endTime=void 0,o}};const y={error:0};t.HistoryResponse={encode(e,o=s.default.Writer.create()){for(const t of e.messages)n.WakuMessage.encode(t,o.uint32(18).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,o.uint32(26).fork()).ldelim(),0!==e.error&&o.uint32(32).int32(e.error),o},decode(e,o){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===o?r.len:r.pos+o;const a=Object.assign({},y);for(a.messages=[];r.pos<i;){const e=r.uint32();switch(e>>>3){case 2:a.messages.push(n.WakuMessage.decode(r,r.uint32()));break;case 3:a.pagingInfo=t.PagingInfo.decode(r,r.uint32());break;case 4:a.error=r.int32();break;default:r.skipType(7&e)}}return a},fromJSON(e){const o=Object.assign({},y);if(o.messages=[],void 0!==e.messages&&null!==e.messages)for(const t of e.messages)o.messages.push(n.WakuMessage.fromJSON(t));return void 0!==e.pagingInfo&&null!==e.pagingInfo?o.pagingInfo=t.PagingInfo.fromJSON(e.pagingInfo):o.pagingInfo=void 0,void 0!==e.error&&null!==e.error?o.error=d(e.error):o.error=0,o},toJSON(e){const o={};return e.messages?o.messages=e.messages.map((e=>e?n.WakuMessage.toJSON(e):void 0)):o.messages=[],void 0!==e.pagingInfo&&(o.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.error&&(o.error=p(e.error)),o},fromPartial(e){const o=Object.assign({},y);if(o.messages=[],void 0!==e.messages&&null!==e.messages)for(const t of e.messages)o.messages.push(n.WakuMessage.fromPartial(t));return void 0!==e.pagingInfo&&null!==e.pagingInfo?o.pagingInfo=t.PagingInfo.fromPartial(e.pagingInfo):o.pagingInfo=void 0,void 0!==e.error&&null!==e.error?o.error=e.error:o.error=0,o}};const m={requestId:""};t.HistoryRPC={encode:(e,o=s.default.Writer.create())=>(""!==e.requestId&&o.uint32(10).string(e.requestId),void 0!==e.query&&t.HistoryQuery.encode(e.query,o.uint32(18).fork()).ldelim(),void 0!==e.response&&t.HistoryResponse.encode(e.response,o.uint32(26).fork()).ldelim(),o),decode(e,o){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===o?r.len:r.pos+o;const n=Object.assign({},m);for(;r.pos<i;){const e=r.uint32();switch(e>>>3){case 1:n.requestId=r.string();break;case 2:n.query=t.HistoryQuery.decode(r,r.uint32());break;case 3:n.response=t.HistoryResponse.decode(r,r.uint32());break;default:r.skipType(7&e)}}return n},fromJSON(e){const o=Object.assign({},m);return void 0!==e.requestId&&null!==e.requestId?o.requestId=String(e.requestId):o.requestId="",void 0!==e.query&&null!==e.query?o.query=t.HistoryQuery.fromJSON(e.query):o.query=void 0,void 0!==e.response&&null!==e.response?o.response=t.HistoryResponse.fromJSON(e.response):o.response=void 0,o},toJSON(e){const o={};return void 0!==e.requestId&&(o.requestId=e.requestId),void 0!==e.query&&(o.query=e.query?t.HistoryQuery.toJSON(e.query):void 0),void 0!==e.response&&(o.response=e.response?t.HistoryResponse.toJSON(e.response):void 0),o},fromPartial(e){const o=Object.assign({},m);return void 0!==e.requestId&&null!==e.requestId?o.requestId=e.requestId:o.requestId="",void 0!==e.query&&null!==e.query?o.query=t.HistoryQuery.fromPartial(e.query):o.query=void 0,void 0!==e.response&&null!==e.response?o.response=t.HistoryResponse.fromPartial(e.response):o.response=void 0,o}};var v=(()=>{if(void 0!==v)return v;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==o.g)return o.g;throw"Unable to locate global object"})();const P=v.atob||(e=>v.Buffer.from(e,"base64").toString("binary")),S=v.btoa||(e=>v.Buffer.from(e,"binary").toString("base64"));function T(e){if(e.gt(Number.MAX_SAFE_INTEGER))throw new v.Error("Value is larger than Number.MAX_SAFE_INTEGER");return e.toNumber()}s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},35883:()=>{},46601:()=>{},89214:()=>{},71922:()=>{},2363:()=>{},5696:()=>{},89408:()=>{},57600:()=>{},62678:()=>{},25819:()=>{},52361:()=>{},94616:()=>{}},o={};function r(e){var i=o[e];if(void 0!==i)return i.exports;var s=o[e]={id:e,loaded:!1,exports:{}};return t[e].call(s.exports,s,s.exports,r),s.loaded=!0,s.exports}r.m=t,r.amdO={},e=[],r.O=(t,o,i,s)=>{if(!o){var n=1/0;for(l=0;l<e.length;l++){for(var[o,i,s]=e[l],a=!0,u=0;u<o.length;u++)(!1&s||n>=s)&&Object.keys(r.O).every((e=>r.O[e](o[u])))?o.splice(u--,1):(a=!1,s<n&&(n=s));if(a){e.splice(l--,1);var c=i();void 0!==c&&(t=c)}}return t}s=s||0;for(var l=e.length;l>0&&e[l-1][2]>s;l--)e[l]=e[l-1];e[l]=[o,i,s]},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e={204:0};r.O.j=t=>0===e[t];var t=(t,o)=>{var i,s,[n,a,u]=o,c=0;if(n.some((t=>0!==e[t]))){for(i in a)r.o(a,i)&&(r.m[i]=a[i]);if(u)var l=u(r)}for(t&&t(o);c<n.length;c++)s=n[c],r.o(e,s)&&e[s]&&e[s][0](),e[n[c]]=0;return r.O(l)},o=this.webpackChunkjswaku=this.webpackChunkjswaku||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var i=r.O(void 0,[216],(()=>r(63607)));return r.O(i)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,