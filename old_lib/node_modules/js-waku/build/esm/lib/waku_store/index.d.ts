import Libp2p from 'libp2p';
import { Peer } from 'libp2p/src/peer-store';
import PeerId from 'peer-id';
import { WakuMessage } from '../waku_message';
import { PageDirection } from './history_rpc';
export declare const StoreCodec = "/vac/waku/store/2.0.0-beta3";
export declare const DefaultPageSize = 10;
export { PageDirection };
export interface CreateOptions {
    /**
     * The PubSub Topic to use. Defaults to {@link DefaultPubSubTopic}.
     *
     * The usage of the default pubsub topic is recommended.
     * See [Waku v2 Topic Usage Recommendations](https://rfc.vac.dev/spec/23/) for details.
     *
     * @default {@link DefaultPubSubTopic}
     */
    pubSubTopic?: string;
}
export interface TimeFilter {
    startTime: Date;
    endTime: Date;
}
export interface QueryOptions {
    /**
     * The peer to query. If undefined, a pseudo-random peer is selected from the connected Waku Store peers.
     */
    peerId?: PeerId;
    /**
     * The pubsub topic to pass to the query.
     * See [Waku v2 Topic Usage Recommendations](https://rfc.vac.dev/spec/23/).
     */
    pubSubTopic?: string;
    /**
     * The direction in which pages are retrieved:
     * - [[Direction.BACKWARD]]: Most recent page first.
     * - [[Direction.FORWARD]]: Oldest page first.
     *
     * Note: This does not affect the ordering of messages with the page
     * (oldest message is always first).
     *
     * @default [[Direction.BACKWARD]]
     */
    pageDirection?: PageDirection;
    /**
     * The number of message per page.
     *
     * @default [[DefaultPageSize]]
     */
    pageSize?: number;
    /**
     * Retrieve messages with a timestamp within the provided values.
     */
    timeFilter?: TimeFilter;
    /**
     * Callback called on pages of stored messages as they are retrieved.
     *
     * Allows for a faster access to the results as it is called as soon as a page
     * is received. Traversal of the pages is done automatically so this function
     * will invoked for each retrieved page.
     *
     * If the call on a page returns `true`, then traversal of the pages is aborted.
     * For example, this can be used for the caller to stop the query after a
     * specific message is found.
     */
    callback?: (messages: WakuMessage[]) => void | boolean;
    /**
     * Keys that will be used to decrypt messages.
     *
     * It can be Asymmetric Private Keys and Symmetric Keys in the same array,
     * all keys will be tried with both methods.
     */
    decryptionKeys?: Array<Uint8Array | string>;
}
/**
 * Implements the [Waku v2 Store protocol](https://rfc.vac.dev/spec/13/).
 */
export declare class WakuStore {
    libp2p: Libp2p;
    pubSubTopic: string;
    decryptionKeys: Set<Uint8Array>;
    constructor(libp2p: Libp2p, options?: CreateOptions);
    /**
     * Do a History Query to a Waku Store.
     *
     * @param contentTopics The content topics to pass to the query, leave empty to
     * retrieve all messages.
     *
     * @throws If not able to reach a Waku Store peer to query
     * or if an error is encountered when processing the reply.
     */
    queryHistory(contentTopics: string[], options?: QueryOptions): Promise<WakuMessage[]>;
    /**
     * Register a decryption key to attempt decryption of messages received in any
     * subsequent [[queryHistory]] call. This can either be a private key for
     * asymmetric encryption or a symmetric key. [[WakuStore]] will attempt to
     * decrypt messages using both methods.
     *
     * Strings must be in hex format.
     */
    addDecryptionKey(key: Uint8Array | string): void;
    /**
     * Delete a decryption key that was used to attempt decryption of messages
     * received in subsequent [[queryHistory]] calls.
     *
     * Strings must be in hex format.
     */
    deleteDecryptionKey(key: Uint8Array | string): void;
    /**
     * Returns known peers from the address book (`libp2p.peerStore`) that support
     * store protocol. Waku may or  may not be currently connected to these peers.
     */
    get peers(): Peer[];
    /**
     * Returns a random peer that supports store protocol from the address
     * book (`libp2p.peerStore`). Waku may or  may not be currently connected to
     * this peer.
     */
    get randomPeer(): Peer | undefined;
}
