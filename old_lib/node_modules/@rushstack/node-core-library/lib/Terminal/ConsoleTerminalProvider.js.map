{"version":3,"file":"ConsoleTerminalProvider.js","sourceRoot":"","sources":["../../src/Terminal/ConsoleTerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2BAAyB;AACzB,sCAAuD;AAEvD,2DAAkF;AAqBlF;;;;;GAKG;AACH,MAAa,uBAAuB;IAWlC,YAAmB,UAAoD,EAAE;QAVzE;;WAEG;QACI,mBAAc,GAAY,KAAK,CAAC;QAEvC;;WAEG;QACI,iBAAY,GAAY,KAAK,CAAC;QAGnC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;IAC7C,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAY,EAAE,QAAkC;QAC3D,QAAQ,QAAQ,EAAE;YAChB,KAAK,4CAAwB,CAAC,OAAO,CAAC;YACtC,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,IAAI,CAAC,cAAc,EAAE;oBACvB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC5B;gBACD,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,IAAI,CAAC,YAAY,EAAE;oBACrB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC5B;gBACD,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,GAAG,CAAC;YAClC,OAAO,CAAC,CAAC;gBACP,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM;aACP;SACF;IACH,CAAC;IAED;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,QAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACtB,OAAO,cAAa,CAAC;IACvB,CAAC;CACF;AA9DD,0DA8DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\nimport { enabled as supportsColor } from 'colors/safe';\r\n\r\nimport { ITerminalProvider, TerminalProviderSeverity } from './ITerminalProvider';\r\n\r\n/**\r\n * Options to be provided to a {@link ConsoleTerminalProvider}\r\n *\r\n * @beta\r\n */\r\nexport interface IConsoleTerminalProviderOptions {\r\n  /**\r\n   * If true, print verbose logging messages.\r\n   */\r\n  verboseEnabled: boolean;\r\n\r\n  /**\r\n   * If true, print debug logging messages. Note that \"verbose\" and \"debug\" are considered\r\n   * separate message filters; if you want debug to imply verbose, it is up to your\r\n   * application code to enforce that.\r\n   */\r\n  debugEnabled: boolean;\r\n}\r\n\r\n/**\r\n * Terminal provider that prints to STDOUT (for log- and verbose-level messages) and\r\n * STDERR (for warning- and error-level messsages).\r\n *\r\n * @beta\r\n */\r\nexport class ConsoleTerminalProvider implements ITerminalProvider {\r\n  /**\r\n   * If true, verbose-level messages should be written to the console.\r\n   */\r\n  public verboseEnabled: boolean = false;\r\n\r\n  /**\r\n   * If true, debug-level messages should be written to the console.\r\n   */\r\n  public debugEnabled: boolean = false;\r\n\r\n  public constructor(options: Partial<IConsoleTerminalProviderOptions> = {}) {\r\n    this.verboseEnabled = !!options.verboseEnabled;\r\n    this.debugEnabled = !!options.debugEnabled;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.write}\r\n   */\r\n  public write(data: string, severity: TerminalProviderSeverity): void {\r\n    switch (severity) {\r\n      case TerminalProviderSeverity.warning:\r\n      case TerminalProviderSeverity.error: {\r\n        process.stderr.write(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.verbose: {\r\n        if (this.verboseEnabled) {\r\n          process.stdout.write(data);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.debug: {\r\n        if (this.debugEnabled) {\r\n          process.stdout.write(data);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.log:\r\n      default: {\r\n        process.stdout.write(data);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.eolCharacter}\r\n   */\r\n  public get eolCharacter(): string {\r\n    return EOL;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.supportsColor}\r\n   */\r\n  public get supportsColor(): boolean {\r\n    return supportsColor;\r\n  }\r\n}\r\n"]}